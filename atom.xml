<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>welcome to my blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.shadowerli.com/"/>
  <updated>2018-08-13T08:49:08.321Z</updated>
  <id>https://www.shadowerli.com/</id>
  
  <author>
    <name>Shadowerli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hdfs源码阅读</title>
    <link href="https://www.shadowerli.com/2018/08/01/2018-8-1/"/>
    <id>https://www.shadowerli.com/2018/08/01/2018-8-1/</id>
    <published>2018-07-31T16:00:00.000Z</published>
    <updated>2018-08-13T08:49:08.321Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>为了提高java能力、打算自己造一个简单的hdfs<br><a id="more"></a><br>首简单熟悉api再从hdfs的源码开始看起<br>hdfs的一系列操作如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HdfsClient</span> </span>&#123;</span><br><span class="line">        FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// 构造一个配置参数对象，设置一个参数：我们要访问的hdfs的URI</span></span><br><span class="line">            <span class="comment">// 从而FileSystem.get()方法就知道应该是去构造一个访问hdfs文件系统的客户端，以及hdfs的访问地址</span></span><br><span class="line">            <span class="comment">// new Configuration();的时候，它就会去加载jar包中的hdfs-default.xml</span></span><br><span class="line">            <span class="comment">// 然后再加载classpath下的hdfs-site.xml</span></span><br><span class="line">            Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">            conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://localhost:9000"</span>);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 参数优先级： 1、客户端代码中设置的值 2、classpath下的用户自定义配置文件 3、然后是服务器的默认配置</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            conf.set(<span class="string">"dfs.replication"</span>, <span class="string">"3"</span>);</span><br><span class="line">            <span class="comment">// 获取一个hdfs的访问客户端，根据参数，这个实例应该是DistributedFileSystem的实例</span></span><br><span class="line">            <span class="comment">// fs = FileSystem.get(conf);</span></span><br><span class="line">            <span class="comment">// 如果这样去获取，那conf里面就可以不要配"fs.defaultFS"参数，而且，这个客户端的身份标识已经是hadoop用户</span></span><br><span class="line">            fs = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://localhost:9000"</span>), conf, <span class="string">"hadoop"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 往hdfs上传文件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddFileToHdfs</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// 要上传的文件所在的本地路径</span></span><br><span class="line">            Path src = <span class="keyword">new</span> Path(<span class="string">"/usr/redis-recommend.zip"</span>);</span><br><span class="line">            <span class="comment">// 要上传到hdfs的目标路径</span></span><br><span class="line">            Path dst = <span class="keyword">new</span> Path(<span class="string">"/aaa"</span>);</span><br><span class="line">            fs.copyFromLocalFile(src, dst);</span><br><span class="line">            fs.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 从hdfs中复制文件到本地文件系统</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDownloadFileToLocal</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException </span>&#123;</span><br><span class="line">            fs.copyToLocalFile(<span class="keyword">new</span> Path(<span class="string">"/text"</span>), <span class="keyword">new</span> Path(<span class="string">"/usr/local"</span>));</span><br><span class="line">            fs.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMkdirAndDeleteAndRename</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException </span>&#123;</span><br><span class="line">            <span class="comment">// 创建目录</span></span><br><span class="line">            fs.mkdirs(<span class="keyword">new</span> Path(<span class="string">"/a1/b1/c1"</span>));</span><br><span class="line">            <span class="comment">// 删除文件夹 ，如果是非空文件夹，参数2必须给值true</span></span><br><span class="line">            fs.delete(<span class="keyword">new</span> Path(<span class="string">"/aaa"</span>), <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 重命名文件或文件夹</span></span><br><span class="line">            fs.rename(<span class="keyword">new</span> Path(<span class="string">"/a1"</span>), <span class="keyword">new</span> Path(<span class="string">"/a2"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看目录信息，只显示文件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListFiles</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IllegalArgumentException, IOException </span>&#123;</span><br><span class="line">            <span class="comment">// 思考：为什么返回迭代器，而不是List之类的容器</span></span><br><span class="line">            RemoteIterator&lt;LocatedFileStatus&gt; listFiles = fs.listFiles(<span class="keyword">new</span> Path(<span class="string">"/"</span>), <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">while</span> (listFiles.hasNext()) &#123;</span><br><span class="line">                LocatedFileStatus fileStatus = listFiles.next();</span><br><span class="line">                System.out.println(fileStatus.getPath().getName());</span><br><span class="line">                System.out.println(fileStatus.getBlockSize());</span><br><span class="line">                System.out.println(fileStatus.getPermission());</span><br><span class="line">                System.out.println(fileStatus.getLen());</span><br><span class="line">                BlockLocation[] blockLocations = fileStatus.getBlockLocations();</span><br><span class="line">                <span class="keyword">for</span> (BlockLocation bl : blockLocations) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"block-length:"</span> + bl.getLength() + <span class="string">"--"</span> + <span class="string">"block-offset:"</span> + bl.getOffset());</span><br><span class="line">                    String[] hosts = bl.getHosts();</span><br><span class="line">                    <span class="keyword">for</span> (String host : hosts) &#123;</span><br><span class="line">                        System.out.println(host);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看文件及文件夹信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListAll</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IllegalArgumentException, IOException </span>&#123;</span><br><span class="line">            FileStatus[] listStatus = fs.listStatus(<span class="keyword">new</span> Path(<span class="string">"/"</span>));</span><br><span class="line">            String flag = <span class="string">"d--             "</span>;</span><br><span class="line">            <span class="keyword">for</span> (FileStatus fstatus : listStatus) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fstatus.isFile())  flag = <span class="string">"f--         "</span>;</span><br><span class="line">                System.out.println(flag + fstatus.getPath().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相对那些封装好的方法而言的更底层一些的操作方式</span></span><br><span class="line"><span class="comment">     * 上层那些mapreduce   spark等运算框架，去hdfs中获取数据的时候，就是调的这种底层的api</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamAccess</span> </span>&#123;</span><br><span class="line">        FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">            fs = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://localhost:9000"</span>), conf, <span class="string">"hadoop"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 通过流的方式上传文件到hdfs</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpload</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            FSDataOutputStream outputStream = fs.create(<span class="keyword">new</span> Path(<span class="string">"/text"</span>), <span class="keyword">true</span>);</span><br><span class="line">            FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"/usr/text"</span>);</span><br><span class="line">            IOUtils.copyBytes(inputStream, outputStream,<span class="number">3333333</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDownLoadFileToLocal</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException</span>&#123;</span><br><span class="line">            <span class="comment">//先获取一个文件的输入流----针对hdfs上的</span></span><br><span class="line">            FSDataInputStream in = fs.open(<span class="keyword">new</span> Path(<span class="string">"/text"</span>));</span><br><span class="line">            <span class="comment">//再构造一个文件的输出流----针对本地的</span></span><br><span class="line">            FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/usr/local"</span>));</span><br><span class="line">            <span class="comment">//再将输入流中数据传输到输出流</span></span><br><span class="line">            IOUtils.copyBytes(in, out, <span class="number">4096</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * hdfs支持随机定位进行文件读取，而且可以方便地读取指定长度</span></span><br><span class="line"><span class="comment">         * 用于上层分布式运算框架并发处理数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRandomAccess</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException</span>&#123;</span><br><span class="line">            <span class="comment">//先获取一个文件的输入流----针对hdfs上的</span></span><br><span class="line">            FSDataInputStream in = fs.open(<span class="keyword">new</span> Path(<span class="string">"/test.txt"</span>));</span><br><span class="line">            <span class="comment">//可以将流的起始偏移量进行自定义</span></span><br><span class="line">            in.seek(<span class="number">22</span>);</span><br><span class="line">            <span class="comment">//再构造一个文件的输出流----针对本地的</span></span><br><span class="line">            FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/usr/test.2.txt"</span>));</span><br><span class="line">            IOUtils.copyBytes(in,out,<span class="number">19L</span>,<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 显示hdfs上文件的内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCat</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException</span>&#123;</span><br><span class="line">            FSDataInputStream in = fs.open(<span class="keyword">new</span> Path(<span class="string">"/text.txt"</span>));</span><br><span class="line">            IOUtils.copyBytes(in, System.out, <span class="number">1024</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCat2</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException</span>&#123;</span><br><span class="line">            FSDataInputStream in = fs.open(<span class="keyword">new</span> Path(<span class="string">"/weblog/input/access.log.10"</span>));</span><br><span class="line">            <span class="comment">//拿到文件信息</span></span><br><span class="line">            FileStatus[] listStatus = fs.listStatus(<span class="keyword">new</span> Path(<span class="string">"/weblog/input/access.log.10"</span>));</span><br><span class="line">            <span class="comment">//获取这个文件的所有block的信息</span></span><br><span class="line">            BlockLocation[] fileBlockLocations = fs.getFileBlockLocations(listStatus[<span class="number">0</span>], <span class="number">0L</span>, listStatus[<span class="number">0</span>].getLen());</span><br><span class="line">            <span class="comment">//第一个block的长度</span></span><br><span class="line">            <span class="keyword">long</span> length = fileBlockLocations[<span class="number">0</span>].getLength();</span><br><span class="line">            <span class="comment">//第一个block的起始偏移量</span></span><br><span class="line">            <span class="keyword">long</span> offset = fileBlockLocations[<span class="number">0</span>].getOffset();</span><br><span class="line">            System.out.println(length);</span><br><span class="line">            System.out.println(offset);</span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            FileOutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"d:/block0"</span>));</span><br><span class="line">            <span class="keyword">while</span>(in.read(offset, b, <span class="number">0</span>, <span class="number">4096</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                os.write(b);</span><br><span class="line">                offset += <span class="number">4096</span>;</span><br><span class="line">                <span class="keyword">if</span>(offset&gt;=length) <span class="keyword">return</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            os.flush();</span><br><span class="line">            os.close();</span><br><span class="line">            in.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></excerpt></p><h2 id="MyHdfs"><a href="#MyHdfs" class="headerlink" title="MyHdfs"></a>MyHdfs</h2><p>1、实现的功能namenode和datanode之间的通信<br>2、datanode之间的通信<br>3、简单的文件上传与下载<br>4、逻辑路径的设置</p><p>再捋一下思路、首先拿到一个hdfs的客户端对象、执行操作比如上传文件和目录、先给namenode发送请求、namenode去读取本地的文件里记录的目录信息、<br>把ip传给客户端、然后启动所用datanode、使他们进行交互、然后客户端根据ip去找对应的namenode、然后把文件上传上去、最后是datanode之间的交互、<br>并且定时发送心跳、</p><p>碰到的问题总结</p><p>自己写的rpc框架接口和实现都是放在服务端</p><p>单例模式的使用、应为rpc调用namenode的注册表要保证其一</p><p>泛型方法的使用</p><p>currentHashMap多个datanode调用namenode的注册表示似乎没有实现线程的安全</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;为了提高java能力、打算自己造一个简单的hdfs&lt;br&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://www.shadowerli.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="hadoop" scheme="https://www.shadowerli.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Spark源码阅读</title>
    <link href="https://www.shadowerli.com/2018/07/23/2018-7-23%20/"/>
    <id>https://www.shadowerli.com/2018/07/23/2018-7-23 /</id>
    <published>2018-07-22T16:00:00.000Z</published>
    <updated>2018-07-27T11:19:38.137Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>先从整体来讲讲spark的整个流程<br><a id="more"></a><br>从今天开始终于要做想做了很久的事–学习spark源码。难度异常之大、无论是scala的复杂语法、还是底层复杂的RPC调用都不是短时间内捋的清的、<br>但也只能硬着头皮上了、毕竟不能只做一个调包侠是吧。这篇博客长期更新、每天记录一部分、希望有一天无论是对于spark还是scala都有一种茅塞顿开的感觉、<br>最后再感慨一下、上班真好！！！</excerpt></p><h2 id="spark作业提交至执行流程"><a href="#spark作业提交至执行流程" class="headerlink" title="spark作业提交至执行流程"></a>spark作业提交至执行流程</h2><p>整个spark作业执行流程单位从大到小分别为DAG、stage、taskset、rdd(task)<br>执行步骤为:提交作业job后首先构建生成DAG、通过DAGScheduler调度根据依赖对DAG进行切分得到stage、然后TaskScheduler接受stage后对taskset进行管理并分配给Worker、Worker执行任务<br>stage:由DAGScheduler根据依赖对DAG进行切分得到的单位<br>taskest:每个stage包含若干个taskset、每个taskset包含多个task<br>DAGScheduler:接收DAG后进行划分stage(上游的为ShuffleMapStage、下游为ResultStage)、<br>根据每个stage的partition创建多个Task、最后以taskset的形式提交给TaskScheduler<br>TaskScheduler:接受stage后创建TaskManager对Taskset进行管理、把TaskManager添加到调度池将其交给SchedulerBackend处理(他通过申请TaskScheduler、按照Task调度算法对TaskManager进行排序、然后对Taskset进行分配资源)、</p><h2 id="spark-shuffle的细节"><a href="#spark-shuffle的细节" class="headerlink" title="spark shuffle的细节"></a>spark shuffle的细节</h2><p>先从spark shuffle的问题开始说起<br>早期的spark shuffle存在两个问题1、如果map阶段的输出过大容易造成内存溢出OOM 2、如果reduce的数目过多、每个map的输出结果放到的分区数目过大、会使IO的资源消耗比较严重<br>所以有了如下改进方法<br>1、map输出的结果不是一次性全部输出而是一部分一部分输出、当出现内存空间不足时再将部分数据写到磁盘中<br>2、所有的map输出放到一个合并到一个busket、<br>3、reduce也是逐条拉取、而不是一次性读取</p><h2 id="spark的内存优化"><a href="#spark的内存优化" class="headerlink" title="spark的内存优化"></a>spark的内存优化</h2><p>Tungsten(钨)直接调用sun的api操作内存、所以不用再jvm上创建额外的类和对象</p><h2 id="spark各组件间的通信"><a href="#spark各组件间的通信" class="headerlink" title="spark各组件间的通信"></a>spark各组件间的通信</h2><p>Driver是spark的驱动程序、Driver上有一个心跳接收器HeartbeatReceiver、用来接收excutor的心跳信息、每个活跃的excutor都会定时向接收器发送HeartBeat消息<br>具体的细节如下</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;先从整体来讲讲spark的整个流程&lt;br&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://www.shadowerli.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="spark" scheme="https://www.shadowerli.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>RPC通信机制</title>
    <link href="https://www.shadowerli.com/2018/06/05/2018-6-5/"/>
    <id>https://www.shadowerli.com/2018/06/05/2018-6-5/</id>
    <published>2018-06-04T16:00:00.000Z</published>
    <updated>2018-08-10T08:38:44.159Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>初步实现简单RPC<br><a id="more"></a></excerpt></p><p>先简单的说一下流程：客户端和服务端在两个不同的节点上、客户端想要调用远程服务端的方法、通过返回Proxy.newProxyInstance得到代理对象、再重写InvocationHandler里的invoke方法<br>里面主要负责两个节点之间的通信、和方法的调用。通常的方法是通过一个注册中心来注册代理方法接口和代理方法所在类的字节码文件、但我尝试了很久并不能实现真正远程Rpc调用、<br>于是采用服务端直接反射来得到代理方法所在类的字节码文件、反射所需要的参数只需通过客户端传过来即可、具体实现见代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义要调用的远程接口名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RemoteMethed</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">remoteMethed</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//远程方法实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteMethedImpl</span> <span class="keyword">implements</span> <span class="title">RemoteMethed</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">remoteMethed</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"excute remote methed "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//消息中心的实现类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceCenterImpl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceCenterImpl</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket();</span><br><span class="line">        server.bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line">        System.out.println(<span class="string">"start server"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 1.监听客户端的TCP连接，接到TCP连接后将其封装成tas不，由线程池执行</span></span><br><span class="line">                executor.execute(<span class="keyword">new</span> ServiceTask(server.accept()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            server.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        Socket clent = <span class="keyword">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceTask</span><span class="params">(Socket client)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.clent = client;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ObjectInputStream input = <span class="keyword">null</span>;</span><br><span class="line">            ObjectOutputStream output = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 2.将客户端发送的码流反序列化成对象，反射调用服务实现者，获取执行结果</span></span><br><span class="line">                input = <span class="keyword">new</span> ObjectInputStream(clent.getInputStream());</span><br><span class="line">                <span class="comment">//注册接口的全限定名---代理方法的字节码文件</span></span><br><span class="line">                <span class="comment">//接口的全限定名</span></span><br><span class="line">                String serviceName = input.readUTF();</span><br><span class="line">                <span class="comment">//代理方法名</span></span><br><span class="line">                String methodName = input.readUTF();</span><br><span class="line">                <span class="comment">//Class&lt;?&gt;它是个通配泛型，?可以代表任何类型</span></span><br><span class="line">                <span class="comment">//getClass，利用这个方法就可以获得一个实例的类型类。类型类指的是代表一个类型的类</span></span><br><span class="line">                Class&lt;?&gt;[] parameterTypes = (Class&lt;?&gt;[])input.readObject();</span><br><span class="line">                Object[] arguments = (Object[])input.readObject();</span><br><span class="line">                <span class="comment">//代理方法的字节码文件</span></span><br><span class="line">                Class methodimpl = Class.forName(serviceName+<span class="string">"Impl"</span>);</span><br><span class="line">                <span class="comment">//获得methodName方法，方法参数为parameterTypes</span></span><br><span class="line">                <span class="comment">//表示方法的对象数组</span></span><br><span class="line">                Object result = methodimpl.getMethod(methodName, parameterTypes)</span><br><span class="line">                                .invoke(methodimpl.newInstance(), arguments);          </span><br><span class="line">                <span class="comment">// 3.将执行结果反序列化，通过socket发送给客户端</span></span><br><span class="line">                output = <span class="keyword">new</span> ObjectOutputStream(clent.getOutputStream());</span><br><span class="line">                output.writeObject(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (output != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        output.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (input != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        input.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (clent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        clent.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义客户端代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RPCClient</span> &lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//&lt;T&gt;T相当于返回任意类型 代理哪个类就把哪个类的类加载器放进去</span></span><br><span class="line">    <span class="comment">//在实例化泛型类时，必须指定T的具体类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getRemoteProxyObj</span><span class="params">( Class&lt;?&gt; serviceInterface, <span class="keyword">final</span> InetSocketAddress addr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.将本地的接口调用转换成JDK的动态代理，在动态代理中实现接口的远程调用</span></span><br><span class="line">        <span class="comment">//返回动态代理的接口</span></span><br><span class="line">        <span class="comment">//把接口传进去、通过proxy代理再次访问接口方法时会调用对应的invoke方法</span></span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(serviceInterface.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[]&#123;serviceInterface&#125;,</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">                        ObjectOutputStream output = <span class="keyword">null</span>;</span><br><span class="line">                        ObjectInputStream input = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 2.创建Socket客户端，根据指定地址连接远程服务提供者</span></span><br><span class="line">                            socket = <span class="keyword">new</span> Socket();</span><br><span class="line">                            socket.connect(addr);</span><br><span class="line">                            <span class="comment">// 3.将远程服务调用所需的接口类、方法名、参数列表等编码后发送给服务提供者</span></span><br><span class="line">                            output = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">                            output.writeUTF(serviceInterface.getName());</span><br><span class="line">                            output.writeUTF(method.getName());</span><br><span class="line">                            output.writeObject(method.getParameterTypes());</span><br><span class="line">                            output.writeObject(args);</span><br><span class="line">                            <span class="comment">// 4.同步阻塞等待服务器返回应答，获取应答后返回</span></span><br><span class="line">                            input = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">                            <span class="comment">//返回接口中的方法</span></span><br><span class="line">                            <span class="keyword">return</span> input.readObject();</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) socket.close();</span><br><span class="line">                            <span class="keyword">if</span> (output != <span class="keyword">null</span>) output.close();</span><br><span class="line">                            <span class="keyword">if</span> (input != <span class="keyword">null</span>) input.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//启动客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Startclient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                RemoteMethed service =<span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//可以通过类名直接调类的静态方法或成员变量</span></span><br><span class="line">                    service = RPCClient.getRemoteProxyObj(RemoteMethed.class,</span><br><span class="line">                            <span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">9999</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(service.remoteMethed(<span class="string">"hello"</span>));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">9999999</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ServiceCenterImpl serviceServer = <span class="keyword">new</span> ServiceCenterImpl(<span class="number">9999</span>);</span><br><span class="line">                    serviceServer.start();</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见问题记录"><a href="#常见问题记录" class="headerlink" title="常见问题记录"></a>常见问题记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//流的读取有时候会出现读取不到流的情况、可以把流的创建放到循环里面</span><br><span class="line">ObjectInputStream objectInputStream = new ObjectInputStream(accept.getInputStream());</span><br><span class="line">Object b = objectInputStream.readUTF();</span><br><span class="line">while(true)&#123;</span><br><span class="line">// 可以放到这里面</span><br><span class="line">    // ObjectInputStream objectInputStream = new ObjectInputStream(accept.getInputStream());</span><br><span class="line">    // Object b = objectInputStream.readUTF();</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    if(b!=null)&#123;</span><br><span class="line">    System.out.println(b);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;初步实现简单RPC&lt;br&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://www.shadowerli.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="java" scheme="https://www.shadowerli.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>安全检测</title>
    <link href="https://www.shadowerli.com/2018/05/03/2018-5-3%20/"/>
    <id>https://www.shadowerli.com/2018/05/03/2018-5-3 /</id>
    <published>2018-05-02T16:00:00.000Z</published>
    <updated>2018-05-07T15:16:25.894Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>某比赛要求在施工通过监控对没带安全帽的人进行报警<br><a id="more"></a><br>先吐槽一下比赛的主办方、给的测试视屏画质极低拍摄极为敷衍、有些人连人眼都无法识别是否带了安全帽、这小小的比赛大概整了整个51假期吧、</excerpt></p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>这里主要提供一下思路、传统ssd(高配电脑fater-rcnn走起)+inception3、你可能会问为什么不直接用ssd进行二次训练就好了、我当初也是这么想的这不是很简单么、<br>然后我先把视频一帧帧的读取并转化成图像然后手动lable(这里有个问题就是一个图像中有多个人这样训练的时候会不会造成无法收敛？我觉得会有很大的影响)、<br>然后训练这个像打了码一样的图片(再次吐槽一下主办方)、结果连人都识别不出来！！！内心极度奔溃、然后就用了独创非主流方法</p><h2 id="具体步骤-非主流方法请勿模仿、"><a href="#具体步骤-非主流方法请勿模仿、" class="headerlink" title="具体步骤(非主流方法请勿模仿、)"></a>具体步骤(非主流方法请勿模仿、)</h2><p>鉴于之前连人都识别出来的问题、我就直接调用ssd先去除人、然后对有戴和没戴安全帽的进行训练(通过inception3)、然后运行通过ssd的目标检测结果输入到inception3中进行判别<br>判别的结果传给之前的显示字符串然后进行输出、下面附上源码(目录与object_detection一致)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#视频的读取得到识别物体后显示出来</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils.app_utils <span class="keyword">import</span> FPS</span><br><span class="line"><span class="keyword">from</span> object_detection.utils <span class="keyword">import</span> label_map_util</span><br><span class="line"><span class="keyword">from</span> object_detection.utils <span class="keyword">import</span> visualization_utils <span class="keyword">as</span> vis_util</span><br><span class="line"></span><br><span class="line">CWD_PATH = os.getcwd()</span><br><span class="line"></span><br><span class="line">MODEL_NAME = <span class="string">'ssd_mobilenet_v1_coco_11_06_2017'</span></span><br><span class="line">PATH_TO_CKPT = os.path.join(CWD_PATH, <span class="string">'object_detection'</span>, MODEL_NAME, <span class="string">'frozen_inference_graph.pb'</span>)</span><br><span class="line">PATH_TO_LABELS = os.path.join(CWD_PATH, <span class="string">'object_detection'</span>, <span class="string">'data'</span>, <span class="string">'mscoco_label_map.pbtxt'</span>)</span><br><span class="line"></span><br><span class="line">NUM_CLASSES = <span class="number">2</span></span><br><span class="line">label_map = label_map_util.load_labelmap(PATH_TO_LABELS)</span><br><span class="line"></span><br><span class="line">categories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES,</span><br><span class="line">                                                            use_display_name=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">category_index = label_map_util.create_category_index(categories)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect_objects</span><span class="params">(image_np, sess, detection_graph)</span>:</span></span><br><span class="line">    <span class="comment"># 增加输入图像的维度: [1, None, None, 3]</span></span><br><span class="line">    image_np_expanded = np.expand_dims(image_np, axis=<span class="number">0</span>)</span><br><span class="line">    image_tensor = detection_graph.get_tensor_by_name(<span class="string">'image_tensor:0'</span>)</span><br><span class="line">    <span class="comment"># 得到检测框</span></span><br><span class="line">    boxes = detection_graph.get_tensor_by_name(<span class="string">'detection_boxes:0'</span>)</span><br><span class="line">    <span class="comment">#得到他的得分</span></span><br><span class="line">    scores = detection_graph.get_tensor_by_name(<span class="string">'detection_scores:0'</span>)</span><br><span class="line">    classes = detection_graph.get_tensor_by_name(<span class="string">'detection_classes:0'</span>)</span><br><span class="line">    num_detections = detection_graph.get_tensor_by_name(<span class="string">'num_detections:0'</span>)</span><br><span class="line">    <span class="comment"># Actual detection.</span></span><br><span class="line">    <span class="comment"># 这里的class是包含多个识别种类的二维数组</span></span><br><span class="line">    <span class="comment">#[[100,4]]boxes 每个框的位置坐标,    scores 100个 ,     classes 100个 ,    num_detections 100个</span></span><br><span class="line">    (boxes, scores, classes, num_detections) = sess.run(</span><br><span class="line">        [boxes, scores, classes, num_detections],</span><br><span class="line">        feed_dict=&#123;image_tensor: image_np_expanded&#125;)</span><br><span class="line">    <span class="comment"># Visualization of the results of a detection.</span></span><br><span class="line">    vis_util.visualize_boxes_and_labels_on_image_array(</span><br><span class="line">        image_np,</span><br><span class="line">        np.squeeze(boxes),</span><br><span class="line">        np.squeeze(classes).astype(np.int32),</span><br><span class="line">        np.squeeze(scores),</span><br><span class="line">        category_index,</span><br><span class="line">        use_normalized_coordinates=<span class="keyword">True</span>,</span><br><span class="line">        line_thickness=<span class="number">4</span>,</span><br><span class="line">        min_score_thresh=<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">return</span> image_np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    detection_graph = tf.Graph()</span><br><span class="line">    <span class="keyword">with</span> detection_graph.as_default():</span><br><span class="line">        od_graph_def = tf.GraphDef()</span><br><span class="line">        <span class="keyword">with</span> tf.gfile.GFile(PATH_TO_CKPT, <span class="string">'rb'</span>) <span class="keyword">as</span> fid:</span><br><span class="line">            serialized_graph = fid.read()</span><br><span class="line">            od_graph_def.ParseFromString(serialized_graph)</span><br><span class="line">            tf.import_graph_def(od_graph_def, name=<span class="string">''</span>)</span><br><span class="line">    sess = tf.Session(graph=detection_graph)</span><br><span class="line">    video_capture = cv2.VideoCapture(<span class="string">'b.mp4'</span>)</span><br><span class="line">    fps = FPS().start()</span><br><span class="line">    frame_width = int(video_capture.get(<span class="number">3</span>))</span><br><span class="line">    frame_height = int(video_capture.get(<span class="number">4</span>))</span><br><span class="line">    <span class="comment"># define video output</span></span><br><span class="line">    out = cv2.VideoWriter(<span class="string">'outpy.mp4'</span>, cv2.VideoWriter_fourcc(<span class="string">'M'</span>, <span class="string">'J'</span>, <span class="string">'P'</span>, <span class="string">'G'</span>), <span class="number">10</span>, (frame_width, frame_height))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> video_capture.isOpened():</span><br><span class="line">        ret, frame = video_capture.read()</span><br><span class="line">        t = time.time()</span><br><span class="line">        detected_image = detect_objects(frame, sess, detection_graph)</span><br><span class="line">        fps.update()</span><br><span class="line">        cv2.imshow(<span class="string">'Video'</span>, detected_image)</span><br><span class="line"><span class="comment">#本来想来做个更加流畅的优化、就是格一个帧进行识别、但还是会阻塞</span></span><br><span class="line">        <span class="comment">#if count % 100 == 0:</span></span><br><span class="line">        <span class="comment">#    print(count)</span></span><br><span class="line">        <span class="comment"># write to video file</span></span><br><span class="line">        <span class="comment">#out.write(detected_image)</span></span><br><span class="line">        <span class="comment"># print('[INFO] elapsed time: &#123;:.2f&#125;'.format(time.time() - t))</span></span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    fps.stop()</span><br><span class="line">    video_capture.release()</span><br><span class="line">    sess.close()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#visualization_untils</span></span><br><span class="line"><span class="comment">#第160行进行如下修改、check为inception3的入口、将图片和坐标传入</span></span><br><span class="line">  <span class="keyword">if</span> use_normalized_coordinates:</span><br><span class="line">    (left, right, top, bottom) = (xmin * im_width, xmax * im_width,</span><br><span class="line">                                  ymin * im_height, ymax * im_height)</span><br><span class="line">    </span><br><span class="line">    name=check(image.copy(), left, right, top, bottom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##188 行处</span></span><br><span class="line"><span class="comment">#name为全局变量、接受inception3识别结果的字符串</span></span><br><span class="line">draw.text(</span><br><span class="line">        (left + margin, text_bottom - text_height - margin),</span><br><span class="line">        name,</span><br><span class="line">        fill=<span class="string">'black'</span>,</span><br><span class="line">        font=font)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#check模块、inception3的入口</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(image,left, right, top, bottom)</span>:</span></span><br><span class="line">    got = array(image)</span><br><span class="line">    crop_img = got[int(top):int(bottom), int(left):int(right), <span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment">#载入之前自己训练的模型</span></span><br><span class="line">    <span class="keyword">with</span> tf.gfile.FastGFile(<span class="string">'output_graph.pb'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        graph_def = tf.GraphDef()</span><br><span class="line">        graph_def.ParseFromString(f.read())</span><br><span class="line">        tf.import_graph_def(graph_def, name=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        softmax_tensor = sess.graph.get_tensor_by_name(<span class="string">'final_result:0'</span>)</span><br><span class="line"><span class="comment">#将传入的图片格式转化一下</span></span><br><span class="line">        first = tf.image.convert_image_dtype(crop_img, dtype=tf.float32)</span><br><span class="line">        <span class="comment"># jpeg 进行编码</span></span><br><span class="line">        <span class="comment"># eval()想当于将tensorflow的存储格式中提取出来以数组的格式</span></span><br><span class="line">        encode = tf.image.encode_jpeg(first.eval())</span><br><span class="line">        <span class="comment">#将编码好的图片传入以decodejpeg的格式</span></span><br><span class="line">        predictions = sess.run(softmax_tensor, &#123;<span class="string">'DecodeJpeg/contents:0'</span>: encode.eval()&#125;)  <span class="comment"># 图片格式是jpeg格式</span></span><br><span class="line">        predictions = np.squeeze(predictions)  <span class="comment"># 把结果转为1维数据</span></span><br><span class="line">        top_k = predictions.argsort()[::<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> top_k[<span class="number">0</span>]==<span class="number">1</span>:</span><br><span class="line">            human_string=<span class="string">"unsafe"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            human_string=<span class="string">"safe"</span></span><br><span class="line">        <span class="keyword">return</span> human_string</span><br><span class="line">        <span class="comment">#返回给画框的代码</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看似十分完美流程的过程在实际运行时由于笔记本配置低下(好想要GPU的台式机！！)、换了一台配置稍微高一点的本、但还是崩了、tensorflow开两个session的内存消耗比想象中的要大、开<br>看来这操作只能是活在梦里了、希望以后能想出一种底层之间的优化(相比之前的已经做了很多IO的优化、但主要问题还是这是线性的操作、一定有卡顿来进行二次判断)</p><h2 id="更新！！！"><a href="#更新！！！" class="headerlink" title="更新！！！"></a>更新！！！</h2><p>终于找到了问题所在！！原来每一帧的图像传入后都要重新加载一次graph！！所以导致内存直接爆炸！改动后可以跑的动了、但比较吃配置配置高一点的话可以更加流畅吧、<br>具体改动如下、其余的改动就是要在每个调用的visualization_utils中的函数里传入初始化的graph、具体修改如下、整个项目会放到github上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主要是对main函数下的修改vediondetection.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#tf.Graph()生成新的图</span></span><br><span class="line">    detection_graph = tf.Graph()</span><br><span class="line">    inceptionsess =tf.Graph()</span><br><span class="line">    <span class="keyword">with</span> inceptionsess.as_default():</span><br><span class="line">        od_graph_def = tf.GraphDef()</span><br><span class="line">        <span class="keyword">with</span> tf.gfile.FastGFile(<span class="string">'output_graph.pb'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            serialized_graph = f.read()</span><br><span class="line">            od_graph_def.ParseFromString(serialized_graph)</span><br><span class="line">            tf.import_graph_def(od_graph_def, name=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> detection_graph.as_default():</span><br><span class="line">        od_graph_def = tf.GraphDef()</span><br><span class="line">        <span class="keyword">with</span> tf.gfile.GFile(PATH_TO_CKPT, <span class="string">'rb'</span>) <span class="keyword">as</span> fid:</span><br><span class="line">            serialized_graph = fid.read()</span><br><span class="line">            od_graph_def.ParseFromString(serialized_graph)</span><br><span class="line">            tf.import_graph_def(od_graph_def, name=<span class="string">''</span>)</span><br><span class="line">    sess = tf.Session(graph=detection_graph)</span><br><span class="line">    video_capture = cv2.VideoCapture(<span class="string">'b.mp4'</span>)</span><br><span class="line">    fps = FPS().start()</span><br><span class="line">    frame_width = int(video_capture.get(<span class="number">3</span>))</span><br><span class="line">    frame_height = int(video_capture.get(<span class="number">4</span>))</span><br><span class="line">    <span class="comment"># define video output</span></span><br><span class="line">    out = cv2.VideoWriter(<span class="string">'outpy.mp4'</span>, cv2.VideoWriter_fourcc(<span class="string">'M'</span>, <span class="string">'J'</span>, <span class="string">'P'</span>, <span class="string">'G'</span>), <span class="number">10</span>, (frame_width, frame_height))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> video_capture.isOpened():</span><br><span class="line">        ret, frame = video_capture.read()</span><br><span class="line">        t = time.time()</span><br><span class="line">        detected_image = detect_objects(frame, sess, detection_graph,inceptionsess)</span><br><span class="line">        fps.update()</span><br><span class="line">        out.write(detected_image)</span><br><span class="line">        cv2.imshow(<span class="string">'Video'</span>, detected_image)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    fps.stop()</span><br><span class="line">    video_capture.release()</span><br><span class="line">    sess.close()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对checker类的方法进行的改动</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(image,left, right, top, bottom,inceptionsess)</span>:</span></span><br><span class="line">    got = array(image)</span><br><span class="line">    crop_img = got[int(top):int(bottom), int(left):int(right), <span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># with tf.gfile.FastGFile('output_graph.pb', 'rb') as f:</span></span><br><span class="line">    <span class="comment">#     graph_def = tf.GraphDef()</span></span><br><span class="line">    <span class="comment">#     graph_def.ParseFromString(f.read())</span></span><br><span class="line">    <span class="comment">#     tf.import_graph_def(graph_def, name='')</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session(graph=inceptionsess) <span class="keyword">as</span> sess:</span><br><span class="line">        softmax_tensor = sess.graph.get_tensor_by_name(<span class="string">'final_result:0'</span>)</span><br><span class="line">        <span class="comment"># jpeg 进行编码</span></span><br><span class="line">        <span class="comment"># """Return the value of the tensor represented by this handle.""</span></span><br><span class="line">        encode = tf.image.encode_jpeg(crop_img)</span><br><span class="line">        predictions = sess.run(softmax_tensor, &#123;<span class="string">'DecodeJpeg/contents:0'</span>: encode.eval()&#125;)  <span class="comment"># 图片格式是jpg格式</span></span><br><span class="line">        predictions = np.squeeze(predictions)  <span class="comment"># 把结果转为1维数据</span></span><br><span class="line">        top_k = predictions.argsort()[::<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> top_k[<span class="number">0</span>]==<span class="number">1</span>:</span><br><span class="line">            human_string=<span class="string">"unsafe"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            human_string=<span class="string">"safe"</span></span><br><span class="line">        <span class="keyword">return</span> human_string</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;某比赛要求在施工通过监控对没带安全帽的人进行报警&lt;br&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://www.shadowerli.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="图像识别" scheme="https://www.shadowerli.com/tags/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>定点识别</title>
    <link href="https://www.shadowerli.com/2018/04/08/2018-4-8/"/>
    <id>https://www.shadowerli.com/2018/04/08/2018-4-8/</id>
    <published>2018-04-07T16:00:00.000Z</published>
    <updated>2018-04-29T11:52:07.843Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>基于object_detection训练自己的模型<br><a id="more"></a><br>花了不知道多少天、、主要参加一个定点识别的比赛、算是把模型搞定了、虽然结果十分的令人喜感（哈哈、不说了）、、难度有一点大（主要是各种天坑、在这里记录一下）</excerpt></p><p>这是阿里天池的比赛、比赛给出上万张图片主要是服装、要在每个图片上识别出服装每个关键点、并将识别结果的坐标输出、比如左袖口什么的、差不多有24个标签吧、训练集给出的是每个图片的所有关键点的坐标、我的思路是先根据坐标<br>转化成矩形框(同时对x和y加上自己定义的距离数)、然后通过object_detection确定定位的位置、最后在进行输出(求两个x和两个y的平均来得到中心点)、具体步骤如下：</p><h2 id="根据lable切分图片"><a href="#根据lable切分图片" class="headerlink" title="根据lable切分图片"></a>根据lable切分图片</h2><p>这个脚本主要是根据lable对图片进行切分、根据lable创建若干个文件夹、切好的图片放到每个对应的文件加下、切分完得到几十万张图片(此刻的内心是奔溃的)、<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path=os.getcwd()</span><br><span class="line"><span class="comment">#自己定义框的宽度wide</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawcnts_and_cut</span><span class="params">(original_img,x,y,wide)</span>:</span></span><br><span class="line">    x1=x-wide</span><br><span class="line">    x2=x+wide</span><br><span class="line">    y1=y-wide</span><br><span class="line">    y2=y+wide</span><br><span class="line">    crop_img = original_img[y1:y2, x1:x2]</span><br><span class="line">    <span class="keyword">return</span>  crop_img</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(img_path,save_path,x,y)</span>:</span></span><br><span class="line">    original_img= cv2.imread(img_path)</span><br><span class="line">    crop_img = drawcnts_and_cut(original_img,int(x),int(y),<span class="number">25</span>)</span><br><span class="line">    cv2.imwrite(save_path, crop_img)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">datatranslate</span><span class="params">(data)</span>:</span></span><br><span class="line">    splited=str(data).split()</span><br><span class="line">    <span class="keyword">return</span> splited[<span class="number">0</span>],splited[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#自己根据标签数量来改</span></span><br><span class="line">lable=[<span class="string">'class1'</span>, <span class="string">'class2'</span>]</span><br><span class="line">csv_reader = csv.reader(open(<span class="string">'train\\input.csv'</span>, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">num=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> csv_reader:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">26</span>,<span class="number">1</span>):</span><br><span class="line">        photo=row[<span class="number">0</span>]</span><br><span class="line">        data=row[i]</span><br><span class="line">        category=lable[i]</span><br><span class="line">        splited = str(row[i]).split(<span class="string">"_"</span>)</span><br><span class="line">        print(photo)</span><br><span class="line">        print(num)</span><br><span class="line">        <span class="keyword">if</span> int(splited[<span class="number">0</span>])!=<span class="number">-1</span>:</span><br><span class="line">            lib = path + <span class="string">"\\train\\"</span>+photo</span><br><span class="line">            savepath=path+<span class="string">"\\output\\"</span>+str(category)+<span class="string">"\\"</span>+str(category)+<span class="string">"+"</span>+str(num)+<span class="string">".jpg"</span></span><br><span class="line">            num+=<span class="number">1</span></span><br><span class="line">            start(lib,savepath,splited[<span class="number">0</span>],splited[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><h2 id="将图片转化为对应的xml文件"><a href="#将图片转化为对应的xml文件" class="headerlink" title="将图片转化为对应的xml文件"></a>将图片转化为对应的xml文件</h2><p>默认的边框大小为整个图片的d、长度和宽度可以从图片中获取、最终批量的生成xml文件（突然想起比赛的图片切分后生成的30万个文件、还只能分批次的复制、一复制就卡屏、迷醉、、）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据实际来添加class</span></span><br><span class="line">list=[<span class="string">"class1"</span>,<span class="string">"class2"</span>]</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> list:</span><br><span class="line">    path=os.getcwd()</span><br><span class="line">    <span class="comment">#图像存储位置</span></span><br><span class="line">    src_img_dir = path+<span class="string">"\\input2\\"</span>+a</span><br><span class="line">    <span class="comment"># xml文件存放位置</span></span><br><span class="line">    src_xml_dir = path+<span class="string">"\\input2\\"</span>+a</span><br><span class="line">    img_Lists = glob.glob(src_img_dir + <span class="string">'\*.jpg'</span>)</span><br><span class="line">    img_basenames = [] </span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> img_Lists:</span><br><span class="line">        img_basenames.append(os.path.basename(item))</span><br><span class="line">    img_names = [] </span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> img_basenames:</span><br><span class="line">        temp1, temp2 = os.path.splitext(item)</span><br><span class="line">        img_names.append(temp1)</span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> img_names:</span><br><span class="line">        im = Image.open((src_img_dir + <span class="string">'/'</span> + img + <span class="string">'.jpg'</span>))</span><br><span class="line">        width, height = im.size</span><br><span class="line">        xml_file = open((src_xml_dir + <span class="string">'/'</span> + img + <span class="string">'.xml'</span>), <span class="string">'w'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'&lt;annotation&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'    &lt;folder&gt;'</span>+a+<span class="string">'&lt;/folder&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'    &lt;filename&gt;'</span> + str(img) + <span class="string">'.jpg'</span> + <span class="string">'&lt;/filename&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'    &lt;path&gt;'</span> + path +<span class="string">"\\input2\\"</span>+a+<span class="string">"\\"</span>+ str(img) + <span class="string">'.jpg'</span>+ <span class="string">'&lt;/path&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'    &lt;size&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'        &lt;width&gt;'</span> + str(width) + <span class="string">'&lt;/width&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'        &lt;height&gt;'</span> + str(height) + <span class="string">'&lt;/height&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'        &lt;depth&gt;3&lt;/depth&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'    &lt;/size&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'        &lt;segmented&gt;0&lt;/segmented&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'    &lt;object&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'        &lt;name&gt;'</span> + str(img) + <span class="string">'&lt;/name&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'        &lt;pose&gt;Unspecified&lt;/pose&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'        &lt;truncated&gt;1&lt;/truncated&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'        &lt;difficult&gt;0&lt;/difficult&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'        &lt;bndbox&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'            &lt;xmin&gt;'</span> + <span class="string">"0"</span> + <span class="string">'&lt;/xmin&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'            &lt;ymin&gt;'</span> + <span class="string">"0"</span> + <span class="string">'&lt;/ymin&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'            &lt;xmax&gt;'</span> + str(width) + <span class="string">'&lt;/xmax&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'            &lt;ymax&gt;'</span> + str(height) + <span class="string">'&lt;/ymax&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'        &lt;/bndbox&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'    &lt;/object&gt;\n'</span>)</span><br><span class="line">        xml_file.write(<span class="string">'&lt;/annotation&gt;'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="xml转csv文件合并csv文件"><a href="#xml转csv文件合并csv文件" class="headerlink" title="xml转csv文件合并csv文件"></a>xml转csv文件合并csv文件</h2><p>要使用如下脚本将xml文件转化为csv文件、最后再把每个目录下的csv文件进行合并（注意删除重复的lable）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#xml转csv文件合并csv文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line">tag=[<span class="string">'class1'</span>,<span class="string">'class2'</span>]</span><br><span class="line">num=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xml_to_csv</span><span class="params">(path)</span>:</span></span><br><span class="line">    xml_list = []</span><br><span class="line">    <span class="keyword">for</span> xml_file <span class="keyword">in</span> glob.glob(path + <span class="string">'/*.xml'</span>):</span><br><span class="line">        tree = ET.parse(xml_file)</span><br><span class="line">        root = tree.getroot()</span><br><span class="line">        <span class="keyword">for</span> member <span class="keyword">in</span> root.findall(<span class="string">'object'</span>):</span><br><span class="line">            value = (root.find(<span class="string">'filename'</span>).text,</span><br><span class="line">                     int(root.find(<span class="string">'size'</span>)[<span class="number">0</span>].text),</span><br><span class="line">                     int(root.find(<span class="string">'size'</span>)[<span class="number">1</span>].text),</span><br><span class="line">                     root.find(<span class="string">'folder'</span>).text,</span><br><span class="line">                     int(member[<span class="number">4</span>][<span class="number">0</span>].text),</span><br><span class="line">                     int(member[<span class="number">4</span>][<span class="number">1</span>].text),</span><br><span class="line">                     int(member[<span class="number">4</span>][<span class="number">2</span>].text),</span><br><span class="line">                     int(member[<span class="number">4</span>][<span class="number">3</span>].text)</span><br><span class="line">                     )</span><br><span class="line">            xml_list.append(value)</span><br><span class="line">    column_name = [<span class="string">'filename'</span>, <span class="string">'width'</span>, <span class="string">'height'</span>, <span class="string">'class'</span>, <span class="string">'xmin'</span>, <span class="string">'ymin'</span>, <span class="string">'xmax'</span>, <span class="string">'ymax'</span>]</span><br><span class="line">    xml_df = pd.DataFrame(xml_list, columns=column_name)</span><br><span class="line">    <span class="keyword">return</span> xml_df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> tag:</span><br><span class="line">        image_path = os.path.join(os.getcwd(), <span class="string">'input2\\'</span>+a)</span><br><span class="line">        xml_df = xml_to_csv(image_path)</span><br><span class="line">        xml_df.to_csv(<span class="string">'data\\'</span>+str(a)+<span class="string">'.csv'</span>,index=<span class="keyword">None</span>)</span><br><span class="line">        print(<span class="string">'Successfully converted xml to csv.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>通过shell批量合并csv<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">E:</span><br><span class="line">cd add</span><br><span class="line">dir</span><br><span class="line">copy *.csv all_keywords.csv</span><br><span class="line">echo 合并成功！'</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><h2 id="调用object-detection前的准备"><a href="#调用object-detection前的准备" class="headerlink" title="调用object_detection前的准备"></a>调用object_detection前的准备</h2><p>下面是很有参考性的博客和官方的地址<br><a href="https://blog.csdn.net/honk2012/article/details/79099651" target="_blank" rel="noopener">https://blog.csdn.net/honk2012/article/details/79099651</a><br><a href="https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md" target="_blank" rel="noopener">https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md</a><br>可以翻墙的话推荐下面这篇、这个towardsdatascience还是很不错的<br><a href="https://towardsdatascience.com/how-to-train-your-own-object-detector-with-tensorflows-object-detector-api-bec72ecfe1d9" target="_blank" rel="noopener">https://towardsdatascience.com/how-to-train-your-own-object-detector-with-tensorflows-object-detector-api-bec72ecfe1d9</a><br>基本后面的训练和模型的调用都是在github上的、想普通的个人电脑用ssd的一个mobile就行了、别的根本跑不动、batch设置的越大每次迭代的时间越长、如果太大电脑配置不够的话你就可以重新开机了、、<br>顺便说说几个坑官方步骤中的 protoc object_detection/protos/*.proto –python_out=. 如果是在window下要下载3.4版本的3.5会有bug<br>object_detection初始化一定要先执行、不然会给你各种报错、、<br>官方文档中export PYTHONPATH=$PYTHONPATH:<code>pwd</code>:<code>pwd</code>/slim  如果是windows下执行要用这个命令(查了很久用了很多的坑爹方法、只能说项目对windows不友好)SET PYTHONPATH=%cd%;%cd%\slim  执行目录还是不变<br>注意这几个坑基本就会很顺畅了、还有一些其他小坑一时想不起来、想到了再加、</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;基于object_detection训练自己的模型&lt;br&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://www.shadowerli.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="图像识别" scheme="https://www.shadowerli.com/tags/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>博客搬家</title>
    <link href="https://www.shadowerli.com/2018/03/23/2018-3-23/"/>
    <id>https://www.shadowerli.com/2018/03/23/2018-3-23/</id>
    <published>2018-03-22T16:00:00.000Z</published>
    <updated>2018-03-23T12:26:30.917Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>无意间看到了Hexo的这个黑蓝主题、实在是太cool了！！抽空用了两个晚上搬家<br><a id="more"></a><br>原来的博客一直是用的是jekyll(差点又拼错、)、还是很方便不过还是有很多弊端</excerpt></p><p>1、代码高亮、现在看看原来的博客这代码高亮、、简直无法直视、虽然后来另外装了插件但还是惨不忍睹(主要是这个主题的高亮真的是太漂亮了、看了会上瘾、、)<br>2、由于原来的博客用的是老外的主题为了实现想要的效果文字间的空格符有点受不了、十分影响美观、还有字体(这里支持一下国产、、)<br>3、这个主题有分类功能、随着博客的增多查找也比原来的方便、<br>4、也是主要原因、、就是想换、笑死、、、</p><p>现在终于换好了、过程也十分折腾、也遇到了各种坑、什么Hexo的版本问题、server要独立安装、、、希望这博客可以用几年吧、、同时再次感谢maochunguang提供的主题</p><p>前端真的是一个十分神奇的东西、、但真的没工夫投在上面学了、还有评论功能、看了大佬的主题demo觉得加了评论就不是十分洁简了、于是就不做了（绝不是因为懒）、、</p><p>最后注意我的背景:它是会变的哦、、、</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;无意间看到了Hexo的这个黑蓝主题、实在是太cool了！！抽空用了两个晚上搬家&lt;br&gt;
    
    </summary>
    
      <category term="other" scheme="https://www.shadowerli.com/categories/other/"/>
    
    
      <category term="other" scheme="https://www.shadowerli.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>基于卷积的图片识别</title>
    <link href="https://www.shadowerli.com/2018/03/21/2018-3-22/"/>
    <id>https://www.shadowerli.com/2018/03/21/2018-3-22/</id>
    <published>2018-03-20T16:00:00.000Z</published>
    <updated>2018-05-20T05:49:55.600Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>这篇博客主要介绍通过Tesorflow来实现对图片的识别<br><a id="more"></a></excerpt></p><p>学习深度学习断断续续也将近半年了、从去年暑假接触tensorflow一步步从入门到放弃、又继续现在才算明白每一步做的是什么、本来想深入研究词向量分析做一个在线翻译的小项目和属于自己的siri（这一定非常cool）、在导师的建议下先从图像识别做起、语义模型的确太复杂了只能怪中国语言博大精深（笑死、、）可能做了一两年最终的结果将会出乎意料的喜感、不得不赞叹一下油管、、在线翻译实在是太强大了要是哪天能在谷歌工作就好了、不知不觉敲了好多废话、该写总结了<br>以下是写的很详细详细的链接、看不懂的可以再细细的看这个链接看个权重的动态图就行了、绝对精髓<br><a href="https://www.2cto.com/kf/201607/522441.html" target="_blank" rel="noopener">https://www.2cto.com/kf/201607/522441.html</a></p><p>首先从输入的图片开始、mnist是28x28的单颜色通道的图片、训练时读取的是[batchsize,784]的数组、要转化为tensorflow卷积支持的输入格式[batchsize,28,28,1]、第二、三个表示几乘几的图片、最后一个表示颜色通道、这里为1因为是灰度图、接下来定义卷积的权重、就是你要定义一个移动的的过滤器来扫描这个图片以及若干个内核来存储扫描器与图片权值相乘再加上偏置值的一个结果、最终就可以得到卷积层的输出、需要定义的参数参考这篇博客十分的详细<br><a href="https://www.cnblogs.com/qggg/p/6832342.html" target="_blank" rel="noopener">https://www.cnblogs.com/qggg/p/6832342.html</a></p><p>卷积层得到输入后将其导入池化层、池化层大大减小了变量的个数（真的十分敬佩模型的创始人、真的太厉害了）、池化层也有类似的过滤器如果用的是max_pool相当于扫描一个区域、选出区域中最大的一个值输出、按照步长移动再扫描输出、从而最终达到简化参数的目的、池化层输出后将结果导入全连结层、然后就是固定的套路了、</p><p>具体代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mnist=input_data.read_data_sets(<span class="string">"MNIST_data"</span>,one_hot=<span class="keyword">True</span>)</span><br><span class="line">batch_size=<span class="number">100</span></span><br><span class="line">n_batch=mnist.train.num_examples//batch_size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_init</span><span class="params">(shape)</span>:</span></span><br><span class="line">    init=tf.truncated_normal(shape=shape,stddev=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(init)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_init</span><span class="params">(shape)</span>:</span></span><br><span class="line">    init=tf.constant(<span class="number">0.1</span>,shape=shape)</span><br><span class="line">    <span class="keyword">return</span>  tf.Variable(init)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(input,w)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(input,w,strides=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pool</span><span class="params">(input)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(input,ksize=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line">x=tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">784</span>])</span><br><span class="line">y=tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">10</span>])</span><br><span class="line"><span class="comment">#全0填充从一开始移动</span></span><br><span class="line">input=tf.reshape(x,[<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#定义卷积的深度为32</span></span><br><span class="line"><span class="comment">#第一层卷积的输入[128,28,28,1]</span></span><br><span class="line">w_conv1=weight_init([<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">16</span>])</span><br><span class="line">b_conv1=weight_init([<span class="number">16</span>])</span><br><span class="line"><span class="comment">#定义的是same有0来填充每次管道的核心将会一次经过每个像素点</span></span><br><span class="line">conv1=tf.nn.relu(conv2d(input,w_conv1)+b_conv1)</span><br><span class="line"><span class="comment">#第一层卷积输出[128,28,28,16]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#池化层只在指定的2，3维度上进行池化</span></span><br><span class="line"><span class="comment">#得到池化层的输出[128,14,14,16]</span></span><br><span class="line">pool1=pool(conv1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对应池化层的输出所以第三位为32此处定义深度为64</span></span><br><span class="line">w_conv2=weight_init([<span class="number">5</span>,<span class="number">5</span>,<span class="number">16</span>,<span class="number">64</span>])</span><br><span class="line">b_conv2=weight_init([<span class="number">64</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#卷积的输出[128,14,14,64]</span></span><br><span class="line">conv2=tf.nn.relu(conv2d(pool1,w_conv2)+b_conv2)</span><br><span class="line"><span class="comment">#得到池化的最终输出[128,7,7,64]</span></span><br><span class="line">pool2=pool(conv2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义全连结层的权重</span></span><br><span class="line">weight=weight_init([<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>,<span class="number">500</span>])</span><br><span class="line">bias=bias_init([<span class="number">500</span>])</span><br><span class="line"></span><br><span class="line">normal=tf.reshape(pool2,[<span class="number">-1</span>,<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br><span class="line"><span class="comment">#[-1,1024]</span></span><br><span class="line">output1=tf.nn.relu(tf.matmul(normal,weight)+bias)</span><br><span class="line">keep=tf.placeholder(tf.float32)</span><br><span class="line"><span class="comment">#定义dropout防止过拟合对提高准确率有很大的帮助</span></span><br><span class="line">drop=tf.nn.dropout(output1,keep)</span><br><span class="line"></span><br><span class="line">weight2=weight_init([<span class="number">500</span>,<span class="number">10</span>])</span><br><span class="line">bias2=bias_init([<span class="number">10</span>])</span><br><span class="line"><span class="comment">#最终得到的输出数组的每一个权值不一定是0，1、Softmax然后会正则化这些权重值、使它们的总和等于1、以此构造一个有效的概率分布</span></span><br><span class="line">prediction=tf.nn.softmax(tf.matmul(drop,weight2)+bias2)</span><br><span class="line"></span><br><span class="line">cross_entropy=tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=prediction))</span><br><span class="line"><span class="comment">#这里用AdamOptimizer的效果要比梯度下降要好</span></span><br><span class="line">train_step=tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cross_entropy)</span><br><span class="line">correct_prediction=tf.equal(tf.arg_max(prediction,<span class="number">1</span>),tf.arg_max(y,<span class="number">1</span>))</span><br><span class="line">accuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">            batch_xs,batch_ys =mnist.train.next_batch(batch_size)</span><br><span class="line">            sess.run(train_step,feed_dict=&#123;x:batch_xs,y:batch_ys,keep:<span class="number">0.7</span>&#125;)</span><br><span class="line">        acc=sess.run(accuracy,feed_dict=&#123;x:mnist.test.images,y:mnist.test.labels,keep:<span class="number">1.0</span>&#125;)</span><br><span class="line">        print(<span class="string">'iter'</span>+str(epoch)+<span class="string">"  correct "</span>+str(acc))</span><br><span class="line">    input_image = mnist.train.images[<span class="number">11</span>:<span class="number">12</span>]</span><br><span class="line">    <span class="comment"># 可视化卷积层学习到的特征</span></span><br><span class="line">    <span class="comment"># 输入一张图片</span></span><br><span class="line">    cnn1=sess.run(w_conv1, feed_dict=&#123;x:input_image&#125;)</span><br><span class="line">    conv1_reshape = sess.run(tf.reshape(cnn1, [<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">16</span>]))</span><br><span class="line">    plt.figure()</span><br><span class="line">    <span class="comment"># 放在两行两列第一个位置#将舍去数组的后两位</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 将舍去数组的后两位</span></span><br><span class="line">    plt.imshow(conv1_reshape[:,:,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">    plt.title(<span class="string">'Conv1 16x28x28'</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></p><h2 id="参数的计算"><a href="#参数的计算" class="headerlink" title="参数的计算"></a>参数的计算</h2><p>假设N<em>N为输入图像的size、F</em>F是filter(卷积核)的size、stride(即卷积核每次移动的像素)是滑动的步长。<br>那么一次卷积之后输出的第一个维度为(N-F)/stride +1</p><p>下面是一篇关于交叉熵的问题的博客<br><a href="http://blog.csdn.net/john_xyz/article/details/61211422" target="_blank" rel="noopener">http://blog.csdn.net/john_xyz/article/details/61211422</a><br>笔记本配置比较一般、渴望gpu来拯救、由于训练的比较慢又要不断调整参数最终准确率在97%以上是没问题的</p><h2 id="图像识别"><a href="#图像识别" class="headerlink" title="图像识别"></a>图像识别</h2><p>一般做图像识别用到的模型在github上都开源出来了、比如inception3就有基于Tensorflow的了、用inception3训练自己模型时卷积层的参数大致是不变的改变的是顶部神经元的参数<br>前面的操作差不多做的是特征提取、所以用自己的数据训练后得到的结果还是不错的、<br>下面是谷歌物体识别的连接、下面的模型可以拿来直接用不用自己一层一层搭网络、里面也有已经训练好的模型(当自己想要做点什么的时候谷歌都做好了、、、)<br><a href="https://github.com/tensorflow/models/tree/master/research/object_detection" target="_blank" rel="noopener">https://github.com/tensorflow/models/tree/master/research/object_detection</a><br>环境搭建推荐linux、windows的坑太多浪费了好长时间、官方给的教程十分精辟、要注意每次敲命令行要严格！！！对应注释中给的目录<br>最后还可以训练自己的数据集、教程官方github上也有、网上的教程也十分多参照一下就好了（不想再做验证性工作了）、、</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;这篇博客主要介绍通过Tesorflow来实现对图片的识别&lt;br&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://www.shadowerli.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="cnn" scheme="https://www.shadowerli.com/tags/cnn/"/>
    
  </entry>
  
  <entry>
    <title>Java Future</title>
    <link href="https://www.shadowerli.com/2018/02/22/2018-2-22/"/>
    <id>https://www.shadowerli.com/2018/02/22/2018-2-22/</id>
    <published>2018-02-21T16:00:00.000Z</published>
    <updated>2018-04-02T15:10:08.570Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>这篇博客主要简单介绍future模式的原理<br><a id="more"></a><br><strong>future模式的作用:</strong> 在多线程开发中、当客户端通过发送一个请求去得到某个资源、服务端异步的在后台另起 一个线程去获取资源、而客户端无需一直等待取资源的过程、仍然可以做其他的事情、具体的过程图如下<br><img src="http://aRootUser.github.io/img/8/1.png"><br><strong>具体代码实现过程：</strong> 定义Data接口、Realdata和futuredata都要实现这个接口、在futureClient中定义main方法、首先调用FutureClient中的call<br>方法(通过wait等待被唤醒)、另起一个线程(在这个线程中装载realdata、在realdata中延迟5秒来模拟数据查询)、当数据查询完毕后装载数据<br>在FutureData的setRealdata中来通过notify唤醒之前wait的方法最终得到查询结果、<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line"><span class="function">String <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureClient</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">FutureClient fc=<span class="keyword">new</span> FutureClient();</span><br><span class="line"><span class="comment">//返回futuredata、调用call方法</span></span><br><span class="line">Data data=fc.call(<span class="string">"8888"</span>);</span><br><span class="line">System.out.println(<span class="string">"请求成功做其他事"</span>);</span><br><span class="line">String result=data.call();</span><br><span class="line">System.out.println(<span class="string">"查询结果为"</span>+result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回一个接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Data <span class="title">call</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">FutureData fd=<span class="keyword">new</span> FutureData();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RealData rd=<span class="keyword">new</span> RealData(a);</span><br><span class="line">fd.setRealdata(rd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">System.out.println(<span class="string">"返回futuredata对象"</span>);</span><br><span class="line"><span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealData</span> <span class="keyword">implements</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">String result;</span><br><span class="line"><span class="comment">//构造方法来实现查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RealData</span><span class="params">(String realdata)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"查询号码"</span>+realdata);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"查询完毕"</span>);</span><br><span class="line">result=<span class="string">"1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureData</span> <span class="keyword">implements</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">String data;</span><br><span class="line">RealData realdata;</span><br><span class="line"><span class="keyword">boolean</span> isready=<span class="keyword">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setRealdata</span><span class="params">(RealData realData)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isready)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没装载进行装载真实对象</span></span><br><span class="line"><span class="keyword">this</span>.realdata=realData;</span><br><span class="line">isready=<span class="keyword">true</span>;</span><br><span class="line">notify();</span><br><span class="line">System.out.println(<span class="string">"唤醒另一个线程"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">synchronized</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!isready) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"futuredata.call"</span>);</span><br><span class="line">wait();</span><br><span class="line">System.out.println(<span class="string">"线程已被唤醒"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.realdata.call();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果如下</span></span><br><span class="line"><span class="comment">//返回futuredata对象</span></span><br><span class="line"><span class="comment">//请求成功做其他事</span></span><br><span class="line"><span class="comment">//查询号码8888</span></span><br><span class="line"><span class="comment">//查询完毕</span></span><br><span class="line"><span class="comment">//唤醒另一个线程</span></span><br><span class="line"><span class="comment">//线程已被唤醒</span></span><br><span class="line"><span class="comment">//查询结果为1</span></span><br></pre></td></tr></table></figure></excerpt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;这篇博客主要简单介绍future模式的原理&lt;br&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://www.shadowerli.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Lstm入门</title>
    <link href="https://www.shadowerli.com/2018/02/10/2018-2-10/"/>
    <id>https://www.shadowerli.com/2018/02/10/2018-2-10/</id>
    <published>2018-02-09T16:00:00.000Z</published>
    <updated>2018-03-24T02:06:49.539Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>lstm来实现手写数字识别<br><a id="more"></a></excerpt></p><h2 id="lstm-简-介"><a href="#lstm-简-介" class="headerlink" title="lstm 简 介"></a>lstm 简 介</h2><p>lstm的设计解决了传统RNN对于长期时间依赖的局限性、通过训练遗忘门来决定丢弃没有用的信息、记忆门来更新lstm的状态并把状态传递给下一个lstm、每个lstm的输入包括上一个lstm的输出和状态、更多细节参考下面的博客<br><a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="noopener">Understanding LSTM Networks</a></p><h2 id="lstm实现手写数字识别的基本步骤-基于tensorflow"><a href="#lstm实现手写数字识别的基本步骤-基于tensorflow" class="headerlink" title="lstm实现手写数字识别的基本步骤(基于tensorflow)"></a>lstm实现手写数字识别的基本步骤(基于tensorflow)</h2><p>由于输入的是(28,28,batchsize)的三维的数据、所以要对其进行切分将其转换成(28*batchsize,28)二维的数据然后再一行一行的将其输入值lstm、lstm内部的具体实现tensorflow内部已经封装好了只用初始化和定义遗忘率、最后lstm的最后一个输出进行softmax归一化、<br>梯度下降来迭代参数从而使模型达到较高的准确率、下面的代码可以达到97%左右的准确率<br>基于tensorflow的python实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">mnist=input_data.read_data_sets(<span class="string">"MNIST_data"</span>,one_hot=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment">#设置每次训练批次数</span></span><br><span class="line">batchsize=<span class="number">128</span></span><br><span class="line"></span><br><span class="line">weights=tf.Variable(tf.random_normal([<span class="number">28</span>,<span class="number">10</span>]))</span><br><span class="line">bases=tf.Variable(tf.random_normal([<span class="number">10</span>]))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setrnn</span><span class="params">(input)</span>:</span></span><br><span class="line">    <span class="comment">#将输入转化为(128batches*18steps,28input)[1,0,2]表示交换的序列</span></span><br><span class="line">    input=tf.transpose(input,[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>])</span><br><span class="line"><span class="comment">#将数据转化为二维度第二维为28</span></span><br><span class="line">    input=tf.reshape(input,[<span class="number">-1</span>,<span class="number">28</span>])</span><br><span class="line"><span class="comment">#将每一个图片按照行进行切分一共28行</span></span><br><span class="line">    split=tf.split(input,<span class="number">28</span>,<span class="number">0</span>)</span><br><span class="line">    lstm=tf.nn.rnn_cell.BasicLSTMCell(<span class="number">28</span>,forget_bias=<span class="number">0.1</span>,state_is_tuple=<span class="keyword">True</span>)</span><br><span class="line">    output,state=tf.nn.static_rnn(lstm,split,dtype=tf.float32)</span><br><span class="line">    result=tf.matmul(output[<span class="number">-1</span>],weights)+bases</span><br><span class="line">    <span class="keyword">return</span>  result</span><br><span class="line"></span><br><span class="line">x=tf.placeholder(<span class="string">"float"</span>,[<span class="keyword">None</span>,<span class="number">28</span>,<span class="number">28</span>])</span><br><span class="line">y=tf.placeholder(<span class="string">"float"</span>,[<span class="keyword">None</span>,<span class="number">10</span>])</span><br><span class="line">Rnn=setrnn(x)</span><br><span class="line">predit=Rnn</span><br><span class="line">loss=tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=predit,labels=y))</span><br><span class="line">optm=tf.train.GradientDescentOptimizer(<span class="number">0.2</span>).minimize(loss)</span><br><span class="line"><span class="comment">#计算准确率</span></span><br><span class="line">correcrresult=tf.equal(tf.argmax(y,<span class="number">1</span>),tf.argmax(predit,<span class="number">1</span>))</span><br><span class="line">correctmean=tf.reduce_mean((tf.cast(correcrresult,tf.float32)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line"><span class="comment">#一共进行多少次迭代</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">900</span>):</span><br><span class="line">    <span class="comment">#一次跌代的图片数量</span></span><br><span class="line">        total=<span class="number">1000</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(total):</span><br><span class="line">            batch_x ,batchy=mnist.train.next_batch(batchsize)</span><br><span class="line">            batchx=batch_x.reshape((batchsize,<span class="number">28</span>,<span class="number">28</span>))</span><br><span class="line">            sess.run(optm,feed_dict=&#123;x:batchx,y:batchy&#125;)</span><br><span class="line">            <span class="keyword">if</span> i==<span class="number">1</span>:</span><br><span class="line">                print(a,sess.run(loss,feed_dict=&#123;x:batchx,y:batchy&#125;),sess.run(correctmean,feed_dict=&#123;x:batchx,y:batchy&#125;))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;lstm来实现手写数字识别&lt;br&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://www.shadowerli.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="tensorflow" scheme="https://www.shadowerli.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>K-近邻算法Python实现</title>
    <link href="https://www.shadowerli.com/2018/01/30/2018-1-30/"/>
    <id>https://www.shadowerli.com/2018/01/30/2018-1-30/</id>
    <published>2018-01-29T16:00:00.000Z</published>
    <updated>2018-03-24T02:07:57.455Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>运用python通过计算距离来实现对某花的分类<br><a id="more"></a></excerpt></p><h2 id="算法解决的问题"><a href="#算法解决的问题" class="headerlink" title="算法解决的问题"></a>算法解决的问题</h2><p>已知样本集（此处的样本为某花的实例数据）、给定一未知样本的数据来断此样本的类别(此处为判断属于哪一类花）</p><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><p>特征抽取后计算出未知样本到所有已知样本的距离、根据给定参数K（最好为奇数便于投票）选出K个最近的样本点、统计出类别最多的样本点的类别、最终的的分类就是该类别<br>缺陷：数据的分布不均匀会导致结果的不准确<br>优化方法：根据距离的远近添加相应的权重来弱化数据分布不均匀的为题（下面代码还没实现权重的添加、、以后有空再加、、、）<br>个人脑洞：对于多维的数据、在二维分布上可能看不出任何规律、但在高维的空间中明显的可以分开好几个类别（如本例的某花数据在三维下就很明显了、还有支持向量机的划分方法太cool了）<br>此处的样本集（非常nice的数据集大全）<br><a href="http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data" target="_blank" rel="noopener">http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data</a><br>样本集示例：前四列为花的数据、最后为花的类别</p><p>5.1,3.5,1.4,0.2,Iris-setosa</p><p>5.0,3.3,1.4,0.2,Iris-setosa</p><p>7.0,3.2,4.7,1.4,Iris-versicolor</p><p>4.6,3.1,1.5,0.2,Iris-setosa</p><p>6.4,3.2,5.3,2.3,Iris-virginica</p><p>6.9,3.2,5.7,2.3,Iris-virginica</p><p>4.6,3.4,1.4,0.3,Iris-setosa</p><p>代码实现如下：用测试集测试可以达到96%的准确率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入样本集list</span></span><br><span class="line"><span class="comment">#导入测试集计算测试集到每个样本集的距离,结果保存为list</span></span><br><span class="line"><span class="comment">#根据distance排名取k个投票选出最多的这个类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#传递时要第二个参数要为空参否则会共用同一个地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">(local)</span>:</span></span><br><span class="line">    dataset=[]</span><br><span class="line">    <span class="keyword">with</span> open(local) <span class="keyword">as</span> file2:</span><br><span class="line">        csv_reader = csv.reader(file2)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> csv_reader:</span><br><span class="line">            dataset.append(line)</span><br><span class="line">    <span class="keyword">return</span> dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span> <span class="params">(test,train)</span>:</span></span><br><span class="line">    result=<span class="number">0.0</span></span><br><span class="line">    <span class="comment">#此时每个test例如[1,2,3,4]每个train例如[1,2,3,4,a],-1除去标签</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span>  range(len(test)<span class="number">-1</span>):</span><br><span class="line">        result=result+math.sqrt(abs((float(test[i])-float(train[i]))*(float(test[i])+float(train[i]))))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(train,test,k=<span class="number">3</span>)</span>:</span></span><br><span class="line">    result=[]</span><br><span class="line">    sortresult=[]</span><br><span class="line">    <span class="comment">#计算每个样本集到样本的距离</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(test)):</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> range(len(train)):</span><br><span class="line">            <span class="comment">#对于每个测试实例得到距离和对应的标签</span></span><br><span class="line">            result.append([distance(test[i],train[m]),train[m][<span class="number">-1</span>]])</span><br><span class="line">        sortresult.append(findsort(result,k))<span class="comment">#得到每一个测试集的分类结果</span></span><br><span class="line">        result=[]                            <span class="comment">#将每个测试集的距离集合清空</span></span><br><span class="line">    <span class="keyword">return</span> sortresult       <span class="comment">#最终结果</span></span><br><span class="line">    <span class="comment">#得到结果集，每一个test到样本集的距离</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例输入[[3.917258917468777, 'Iris-setosa'], [4.365595716195167, 'Iris-setosa']]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findsort</span><span class="params">(data,k=<span class="number">3</span>)</span>:</span></span><br><span class="line">    result=&#123;&#125;</span><br><span class="line">    voat=[]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(len(data)):</span><br><span class="line">            result.update(&#123;data[x][<span class="number">0</span>]:data[x][<span class="number">1</span>]&#125;)</span><br><span class="line">    <span class="comment">#对字典进行排序从小到大</span></span><br><span class="line">    a=sorted(result.items(), key=<span class="keyword">lambda</span> d: d[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range(k):</span><br><span class="line">         voat.append(a[m][<span class="number">-1</span>])</span><br><span class="line">    <span class="comment">#得到列表中出现次数最多的元素</span></span><br><span class="line">    b=Counter(voat).most_common(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> b[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算准确率</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">correct</span><span class="params">(sample,predict)</span>:</span></span><br><span class="line">    flag=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(len(sample)):</span><br><span class="line">        <span class="keyword">if</span>(sample[a]==predict[a]):</span><br><span class="line">            flag=flag+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> flag/len(sample)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    testlist=[]</span><br><span class="line">    train=list(readfile(<span class="string">"F:\\train.csv"</span>))</span><br><span class="line">    test=list(readfile(<span class="string">"F:\\test.csv"</span>))</span><br><span class="line">    <span class="comment">#k为最近邻的个数</span></span><br><span class="line">    output=sort(train,test,<span class="number">3</span>)</span><br><span class="line">    <span class="comment">#得到分类的结果集</span></span><br><span class="line">    print(output)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(len(test)):</span><br><span class="line">        testlist.append(test[a][<span class="number">-1</span>])</span><br><span class="line">    <span class="comment">#输出准确率</span></span><br><span class="line">    print(correct(testlist,output))</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;运用python通过计算距离来实现对某花的分类&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://www.shadowerli.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://www.shadowerli.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>数据集生成器</title>
    <link href="https://www.shadowerli.com/2018/01/27/2018-1-27/"/>
    <id>https://www.shadowerli.com/2018/01/27/2018-1-27/</id>
    <published>2018-01-26T16:00:00.000Z</published>
    <updated>2018-03-23T11:57:20.735Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>运用java来实现自定义的数据集<br><a id="more"></a></excerpt></p><p>使用说明这是一个用java写的用户自定义数据集生成器、目前只支持日期用户名和用户标识三个字段、由于是1.0版本功能比较少、<br>为了满足大数据自定义的数据来源将继续开发(今天玩spark竟找不到想要的数据集、、)、整个项目已经发布在github上、程序的入口在main class、<br>运行时要先配置好setting.properties在里面要定义好所需要的字段的种类数、注意输入必须为大于等于1的正整数、并且sum的值至少为6、<br>运行成功后将在相对路径下生成result数据集、有空会用python来重写整个项目(有空练练python、其实也是挺好玩的)、项目难度不大具体源码的介绍如下、<br>程序定义4个类分别为主类、日期类、标识类、用户id类、初始化自定义数量后通过三个类返回的容器进行汇总、最后通过文本文件输出<br>目前需要改进的地方：日期库、、程序写死了还不能实现真正意义上的用户自定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mainclass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> idnum ;   <span class="comment">//定义不同id的个数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> flagnum ; <span class="comment">//定义不同行为标记的个数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sum ;      <span class="comment">//定义数据集的总行数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化成员变量</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">ResourceBundle set=ResourceBundle.getBundle(<span class="string">"setting"</span>);</span><br><span class="line">idnum=Integer.parseInt(set.getString(<span class="string">"idnum"</span>));</span><br><span class="line">flagnum=Integer.parseInt(set.getString(<span class="string">"flagnum"</span>));</span><br><span class="line">sum=Integer.parseInt(set.getString(<span class="string">"sum"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">ArrayList&lt;String&gt; flager= <span class="keyword">new</span> Flag(flagnum,sum).create();</span><br><span class="line">ArrayList&lt;String&gt; dater= <span class="keyword">new</span> Data(sum).create();</span><br><span class="line">ArrayList&lt;String&gt; ider= <span class="keyword">new</span> Id(idnum,sum).create();</span><br><span class="line">ArrayList&lt;String&gt; result= <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将所有结果进行横向组合</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=sum-<span class="number">1</span>;i++) &#123;</span><br><span class="line">result.add(dater.get(i)+<span class="string">"    "</span>+ider.get(i)+<span class="string">"    "</span>+flager.get(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在相对路径下生成结果文件</span></span><br><span class="line">BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"result.txt"</span>));</span><br><span class="line">Iterator&lt;String&gt; it = result.iterator();  </span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;  </span><br><span class="line">            bw.write(it.next());</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125; </span><br><span class="line">        bw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line">Data(<span class="keyword">int</span> sum)&#123;</span><br><span class="line"><span class="keyword">this</span>.sum=sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ArrayList&lt;String&gt; data=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//自定义日期库</span></span><br><span class="line">String datasort[]= &#123;<span class="string">"2018-1-1"</span>,<span class="string">"2018-1-2"</span>,<span class="string">"2018-1-3"</span>,<span class="string">"2018-1-4"</span>,<span class="string">"2018-1-5"</span>,<span class="string">"2018-1-6"</span>&#125;;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span>  avg=sum/<span class="number">6</span>;                        <span class="comment">//定义一个数来平均分配日期</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>,i=-<span class="number">1</span>;a&lt;=sum-<span class="number">1</span>;a++)&#123;       <span class="comment">//因为0是必定可以被整除的所以i初始值为-1</span></span><br><span class="line"><span class="keyword">if</span>(a%avg==<span class="number">0</span>) &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">5</span>)&#123;i=<span class="number">5</span>;&#125;</span><br><span class="line">data.add(String.valueOf(datasort[i]));<span class="comment">//日期库从0开始</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage()+<span class="string">"sum的值至少为6"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Flag</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flagnum;</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line">String nameid;</span><br><span class="line">Flag(<span class="keyword">int</span> flagnum,<span class="keyword">int</span> sum)&#123;</span><br><span class="line"><span class="keyword">this</span>.flagnum=flagnum;</span><br><span class="line"><span class="keyword">this</span>.sum=sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//存放生成的名字</span></span><br><span class="line">    String name[]=<span class="keyword">new</span> String[flagnum];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>;a&lt;=flagnum-<span class="number">1</span>;a++) &#123;</span><br><span class="line">    <span class="comment">//从0开始定义flag</span></span><br><span class="line">    nameid=String.valueOf(a);</span><br><span class="line">    name[a]=nameid;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//根据名字组合随机生成id  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>;a&lt;=sum-<span class="number">1</span>;a++) &#123;</span><br><span class="line">list.add(name[(<span class="keyword">int</span>)(Math.random()*flagnum)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Id</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> idnum;<span class="comment">//不同名字的数量</span></span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line">String nameid;</span><br><span class="line">Id(<span class="keyword">int</span> idnum,<span class="keyword">int</span> sum)&#123;</span><br><span class="line"><span class="keyword">this</span>.idnum=idnum;</span><br><span class="line"><span class="keyword">this</span>.sum=sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//存放生成的名字</span></span><br><span class="line">    String name[]=<span class="keyword">new</span> String[idnum];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>;a&lt;=idnum-<span class="number">1</span>;a++) &#123;</span><br><span class="line">    <span class="comment">//生成随机生成的名字组合</span></span><br><span class="line">    nameid=String.valueOf((<span class="keyword">char</span>)(<span class="keyword">int</span>)(<span class="number">97</span>+Math.random()*<span class="number">26</span>))+</span><br><span class="line">    String.valueOf((<span class="keyword">char</span>)(<span class="keyword">int</span>)(<span class="number">97</span>+Math.random()*<span class="number">26</span>))+</span><br><span class="line">    String.valueOf((<span class="keyword">char</span>)(<span class="keyword">int</span>)(<span class="number">97</span>+Math.random()*<span class="number">26</span>));</span><br><span class="line">    name[a]=nameid;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//根据名字组合随机生成id  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>;a&lt;=sum-<span class="number">1</span>;a++) &#123;</span><br><span class="line">list.add(name[(<span class="keyword">int</span>)(Math.random()*idnum)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//setting配置文件来定义数据集</span></span><br><span class="line"> <span class="comment">//————————————————————— </span></span><br><span class="line"> <span class="comment">//setting.properties</span></span><br><span class="line"> <span class="comment">//idnum=2</span></span><br><span class="line"> <span class="comment">//flagnum=3</span></span><br><span class="line"> <span class="comment">//sum=10</span></span><br><span class="line"> <span class="comment">//————————————————————</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;运用java来实现自定义的数据集&lt;br&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://www.shadowerli.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="java" scheme="https://www.shadowerli.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java动态代理</title>
    <link href="https://www.shadowerli.com/2018/01/12/2018-1-12/"/>
    <id>https://www.shadowerli.com/2018/01/12/2018-1-12/</id>
    <published>2018-01-11T16:00:00.000Z</published>
    <updated>2018-07-20T03:48:43.979Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>这是一个java动态代理的小例子<br><a id="more"></a><br>java动态代理的作用<br>1、实现一个类的方法的增强(例如类a有一个方法b()、当一个类要调用方法b()时需要给方法b()增加新的功能、但有些时候又需要调用b()的原先方法所以此时不可以重写方法b()、因此使用代理可以在不改变方法b()的基础上来增强方法、以后就使用代理类的增强方法)</excerpt></p><p>2、实现代理(比如类A有很多方法、你可以创建一个代理类B拥有A中的所用方法、在客户端需要调用A的方法时只需要访问B就可以达到和访问A一样的效果、不过代理B可以自己重写某个方法当客户端访问B时实际调用A中定义的方法)</p><p>首先定义三个类一个接口、接口Buy中定义需要增强的方法、原始类Old中的实现原始方法money、定义增强类Proxyclass来实现增强方法、测试类Test来测试增强的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Buy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">money</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Old</span> <span class="keyword">implements</span> <span class="title">Buy</span></span>&#123;</span><br><span class="line"><span class="comment">//需要增强的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">money</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Old old=<span class="keyword">new</span> Old();</span><br><span class="line">System.out.println(<span class="string">"old money"</span>+old.money(<span class="number">44</span>));</span><br><span class="line">Buy a=Proxyclass.getproxyclass(<span class="number">5</span>);</span><br><span class="line">System.out.println(a.money(<span class="number">500</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Proxyclass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Buy <span class="title">getproxyclass</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="comment">//使用默认的类加载器</span></span><br><span class="line">Object proxyobj=Proxy.newProxyInstance(Old.class.getClassLoader(),<span class="keyword">new</span> Class[] &#123;Buy.class&#125;, <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"> <span class="comment">//反射拿到原来的方法</span></span><br><span class="line">Integer result=(Integer)method.invoke(<span class="keyword">new</span> Old(),args);</span><br><span class="line"><span class="comment">//增强的方法</span></span><br><span class="line"><span class="keyword">return</span> result-num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//返回接口</span></span><br><span class="line"><span class="keyword">return</span> (Buy)proxyobj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ticket</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Star realstar=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StarHandler</span><span class="params">(Star realstar)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realstar=realstar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行其他方法"</span>);</span><br><span class="line">        <span class="keyword">if</span>(method.getName().equals(<span class="string">"sing"</span>))&#123;</span><br><span class="line">            method.invoke(realstar,args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Star realStar =<span class="keyword">new</span> Realstar();</span><br><span class="line">        StarHandler handler=<span class="keyword">new</span> StarHandler(realStar);</span><br><span class="line"><span class="comment">//返回一个指定接口的代理类实例，该接口可以将方法调用指派到指定的调用处理程序</span></span><br><span class="line"><span class="comment">//loader - 定义代理类的类加载器</span></span><br><span class="line">        <span class="comment">//interfaces - 代理类要实现的接口列表</span></span><br><span class="line">        <span class="comment">//h - 指派方法调用的调用处理程序</span></span><br><span class="line"><span class="comment">//相当于proxy帮你自动创建这个代理类</span></span><br><span class="line">        Star proxy =(Star)Proxy.newProxyInstance(ClassLoader.getSystemClassLoader()</span><br><span class="line">                ,<span class="keyword">new</span> Class[]&#123;Star.class&#125;,handler);</span><br><span class="line">        proxy.sing();</span><br><span class="line">        proxy.ticket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Realstar</span> <span class="keyword">implements</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"reastar--sing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ticket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"reastar--ticket"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他注意点"><a href="#其他注意点" class="headerlink" title="其他注意点"></a>其他注意点</h3><p>Object invoke方法中参数介绍<br>method:　　指代的是我们所要调用真实对象的某个方法的Method对象<br>args:　　指代的是调用真实对象某个方法时接受的参数</p><p>java spring框架就用了动态代理技术、能为容器中的对象生成动态代理对象、通过利用AOP思想对一些类的功能做了抽取</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;这是一个java动态代理的小例子&lt;br&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://www.shadowerli.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="java" scheme="https://www.shadowerli.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>基本神经网络</title>
    <link href="https://www.shadowerli.com/2017/12/10/2017-12-10/"/>
    <id>https://www.shadowerli.com/2017/12/10/2017-12-10/</id>
    <published>2017-12-09T16:00:00.000Z</published>
    <updated>2018-05-10T08:13:32.167Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>简单整理一下神经网络训练的步骤<br><a id="more"></a><br>总结一下最简单的神经网络的训练过程和原理<br>通常利用数据交叉验证来提高数据利用率<br><img src="http://aRootUser.github.io/img/2/1.jpg"><br>交叉验证：给定一个训练集和测试集，为了最大程度的利用测试集，可以将训练集分为若干份，这里为5。第一次将fold1(折)作为测试集其余的作为训练集，第二次将fold2作为测试集，其余的作为训练集，以此类推从而达到最大化利用数据更新权重的效果<br><img src="http://aRootUser.github.io/img/2/2.jpg"><br>对于输入的一张图片简单将图片的输入像素点看成[1,4]的矩阵、输出层为[1,3],中间的权值为[4,3]的矩阵、和图中不同图中是左成矩阵、这里定义的是右乘矩阵、没有定义中间层、最后还要加上[1,3]偏置值得到[1,3]的输出值每一个值代表某一类别的得分、<br><img src="http://aRootUser.github.io/img/2/3.jpg"><br>为了更好的定以中间权值定义的好坏以及预测结果的准确程度、用损失函数来衡量、损失函数最小表示预测越准确、这里定义的是svm损失函数、<br>l 表示自己定义的可容忍的长度<br>yi表示正确类别的得分<br>j表示其他类别的得分<br>通过计算每个其他类别减去正确类别的得分的最大值的求和来表是损失函数的结果对于多个输入例如输入100张图片还要除去100相当于取平均值<br><img src="http://aRootUser.github.io/img/2/4.jpg"><br>为了防止权值为0从而导致输入样本的每一个值没有被充分利用例如训练得到的两个权值<br>设输入的样本为[1,1,1,1]<br>权重W1[0.5,0.5,0.5,0.5]<br>权重W2[1,0,0,0]<br>矩阵相乘后得到的结果相同但是w2由于有三个0没有充分利用每一项所以添加w的平方项来惩罚权重为w2的情况、使其损失值变大<br><img src="http://aRootUser.github.io/img/2/5.jpg"><br><img src="http://aRootUser.github.io/img/2/6.jpg"><br>分类器的作用将输出的值通过sigmoid函数映射到0至1的区间上、e的x次幂进行放大、最后通过取其作为正确类别的概率取负对数得最终其对应的损失值(因为概率越大越输出的损失值越小)<br>前向传播：从输入的x一直到计算出loss、通过梯度下降算法找到一个下降方向、最终找到最低点、训练的批次数一般为2的整数次幂<br>一个Epoch表示迭代完所有数据、一个迭代表示跑完当前的一个batch</excerpt></p><h2 id="学习率"><a href="#学习率" class="headerlink" title="学习率"></a>学习率</h2><p>每次训练跟新权重的变化要乘一个学习率来调整权值变化的大小、过大会错过最优解</p><h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h2><p>通过计算出每一个权重对最终的loss值的影响来调整权重的大小(向前传播的逆向求解)</p><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><p>对神经元的输出进行去线性化、例如sigmoid函数(由于当x过大时很容易导致梯度消失使其无法求导进行反向传播、现在一般用relu激活函数并且求导简单）</p><h2 id="过拟合问题"><a href="#过拟合问题" class="headerlink" title="过拟合问题"></a>过拟合问题</h2><p>drop-out进行处理通过迭代来弥补神经网络的复杂度</p><h2 id="过程小结"><a href="#过程小结" class="headerlink" title="过程小结"></a>过程小结</h2><p>首先输入训练集如手写数字集、定义神经网络后、通过向前传播得到对每一个类别的输出、通过sortmax函数将输出转化为概率分布、通过与标签进行如下运算个（标签是one-hot概率）、将输出的概率分布取对数与标签值乘积在做平均值求和最后取负数-tf.reduce_sum(y_*tf.log(y))、得到交叉熵来反应结果集与标签的相似度、最后通过梯度下降法不断训练使交叉熵最小、来优化权重参数、</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;简单整理一下神经网络训练的步骤&lt;br&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://www.shadowerli.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="https://www.shadowerli.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Webnote</title>
    <link href="https://www.shadowerli.com/2017/12/02/2017-12-02/"/>
    <id>https://www.shadowerli.com/2017/12/02/2017-12-02/</id>
    <published>2017-12-01T16:00:00.000Z</published>
    <updated>2018-07-31T08:26:35.764Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>用来记录有趣的东西<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="smallnote"><a href="#smallnote" class="headerlink" title="smallnote"></a>smallnote</h2><p>当使用卡夫卡作为MQ时如果出现MQ数据存入的速度远远小于数据从MQ采集的速度、</p><p>可直接通过netty或者mina直接从数据源采集</p><p>java中wait方法释放锁、notify不释放锁直至执行完这个方法</p><p>six是兼容python2,3的一个库<br>for box, color in six.iteritems(box_to_color_map):<br>迭代返回键值对</p><p>idea常用快捷键 alt+7 和 Ctrl+h</p><h2 id="2018-3-10"><a href="#2018-3-10" class="headerlink" title="2018-3-10"></a>2018-3-10</h2><p>币安的黑客攻击这波操作真的是6的飞起、</p><h2 id="2018-3-19"><a href="#2018-3-19" class="headerlink" title="2018-3-19"></a>2018-3-19</h2><p>工作室搬了、怀念大长桌子、</p><h2 id="2018-3-25"><a href="#2018-3-25" class="headerlink" title="2018-3-25"></a>2018-3-25</h2><p>今天写python时碰到的小细节debug了好久、、<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">print(<span class="string">'A'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span><span class="params">(object)</span>:</span></span><br><span class="line">    print(<span class="string">'B'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'C'</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        print(<span class="string">'D'</span>)</span><br><span class="line">    print(<span class="string">"F"</span>)</span><br><span class="line">print(<span class="string">'E'</span>)</span><br><span class="line">my_object1 = MyObject(<span class="string">'Hello'</span>)</span><br><span class="line"><span class="comment">#这段程序的执行结果依次为A、B、F、E、C、D</span></span><br><span class="line"><span class="comment">#类的__init__函数注意是两个下滑线、、</span></span><br><span class="line"><span class="comment">#对一个存放类的set集合根据类中的flag来进行排序、True为降序排列taskset=[]</span></span><br><span class="line">taskset.sort(key=<span class="keyword">lambda</span> obj:obj.flag, reverse=<span class="keyword">True</span>)<span class="comment">#降序排列</span></span><br></pre></td></tr></table></figure></p><p>python引用变量的规则<br>首先从local(例如函数内部)开始，如果有则优先使用<br>若在local没有，则会从local的封闭环境开始搜寻<br>若以上都没有，则在global中搜寻</p><h2 id="2018-3-26"><a href="#2018-3-26" class="headerlink" title="2018-3-26"></a>2018-3-26</h2><p>立个flag每天刷一道算法题</p><h2 id="2018-3-29"><a href="#2018-3-29" class="headerlink" title="2018-3-29"></a>2018-3-29</h2><p>数学建模课中看到了机器学习的影子、不禁听的有点小激动虽然老师讲的也很简略、要是学校有深度学习的选修课就好了（我绝对不逃课）</p><h2 id="2018-4-1"><a href="#2018-4-1" class="headerlink" title="2018-4-1"></a>2018-4-1</h2><p>已无力吐槽win10的霸道更新、各种卸载后终于把更新给禁了(好想有一台Mac、、)、结果晚上就开不了机了、、吐血、、重装了系统配置都没了（还好其他盘都在、当初分好几个区是确的选择）、、<br>浪费了好多时间配置都重新搭的差不多了、唯一开心的是就是系统似乎快了一点、、</p><h2 id="2018-4-15"><a href="#2018-4-15" class="headerlink" title="2018-4-15"></a>2018-4-15</h2><p>阿里的天池比赛彻底放弃了、训练了近10个小时的模型的loss也降到了0.5左右、但识别的结果并不好、可能开始对图片的切割范围过大了、框和框之间的距离拉得太近、要期中考了就不再重新折腾了、<br>突然想做一个基于区块链的”微博”、完全去中心化、言论自由、不受政府监管、想想就好激动、会有搞头不、</p><h2 id="2018-4-16"><a href="#2018-4-16" class="headerlink" title="2018-4-16"></a>2018-4-16</h2><p>最近博客遇到个bug、就是js的动态效果突然加载不出来、debug了一晚上终于发现了错误！！主要是在HTTPS请求下引入HTTP资源造成的Mixed Content的一个错误、特别是chrome这个浏览器、拦截了所有http请求的js脚本、然后就是修改了、把所有js的外部资源链接改成https请求就行了(作为前端小白的我不知道这么说对不对)、当然不能一个个手改、找到hexo主题下的js脚本中对其链接进行修改最后生成就行了、、<br>python也碰到了几个坑有空慢慢填1、浅拷贝和深拷贝 2、创建若个个类丢到list中、遍历取出list中的类并调用其方法时碰到的问题(填坑、调用方法是少加了个括号、我的天太粗心了、、当局者迷啊、)</p><h2 id="2018-4-25"><a href="#2018-4-25" class="headerlink" title="2018-4-25"></a>2018-4-25</h2><p>the g_overmverment have no power to supervise our message、the Internet company shoud not head down to the g_overmverment</p><h2 id="2018-5-6"><a href="#2018-5-6" class="headerlink" title="2018-5-6"></a>2018-5-6</h2><p>灰常开心终于解决了ssd+inception3内存爆炸的问题、做了近半个月的安全识别差不完成了、人是会撒谎的但计算机不会、是该继续研究好久没学的hadoop、spark了</p><h2 id="2018-5-8"><a href="#2018-5-8" class="headerlink" title="2018-5-8"></a>2018-5-8</h2><p>pythcharm的debug    F8下一行     F7 进入函数        F9 停止在下一个断点</p><h2 id="2018-5-15"><a href="#2018-5-15" class="headerlink" title="2018-5-15"></a>2018-5-15</h2><p>了解了锤子发布会、想起差不多一周前的谷歌IO、虽然两者没有比较的意义、只能说希望越大失望越大希望越大吧、不禁又有点心疼老罗、重新定义了重新定义、网上的各种表情包真的是看的迷醉、<br>We are standing at the crossroads of science and art 向伟大的乔布斯致敬！</p><h2 id="2018-5-16"><a href="#2018-5-16" class="headerlink" title="2018-5-16"></a>2018-5-16</h2><p>最讨厌排球、没有之一、大一网球课打的真的是太开心了、</p><h2 id="2018-5-20"><a href="#2018-5-20" class="headerlink" title="2018-5-20"></a>2018-5-20</h2><p>周末想手写inceptionV3、看了看源码、一个函数11个参数、、我还是太年轻了、、、不急慢慢来吧、</p><h2 id="2018-5-21"><a href="#2018-5-21" class="headerlink" title="2018-5-21"></a>2018-5-21</h2><p>玩了半个下午的wncry、还好是在虚拟机上玩、不然真的要WannaCry了、不过说好的到时间了会删除加密文件到最后还是没有删除、公共系统对他而言分分钟秒成渣、</p><h2 id="2018-5-23"><a href="#2018-5-23" class="headerlink" title="2018-5-23"></a>2018-5-23</h2><p>python的装饰器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">common</span><span class="params">(func)</span>:</span></span><br><span class="line">print(<span class="string">"fist"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">common1</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"1"</span>)</span><br><span class="line">        <span class="keyword">return</span> func(<span class="string">"2"</span>)</span><br><span class="line">print(<span class="string">"second"</span>)</span><br><span class="line">    <span class="keyword">return</span> common1</span><br><span class="line"></span><br><span class="line"><span class="comment">#被修饰的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(inputer)</span>:</span></span><br><span class="line">    print(inputer)</span><br><span class="line">    print(<span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line">test=common(new)</span><br><span class="line">test()</span><br><span class="line"><span class="comment">#输出结果为first、second、1、2、3只要进入了common就会先执行方法外的语句</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">common</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">common1</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"1"</span>)</span><br><span class="line">        <span class="keyword">return</span> func(<span class="string">"2"</span>)</span><br><span class="line">    <span class="keyword">return</span> common1</span><br><span class="line"><span class="comment">#内置语法修饰相当于帮你把被修饰的函数传入修饰函数并得到修饰后的原函数</span></span><br><span class="line"><span class="meta">@common</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(inputer)</span>:</span></span><br><span class="line">    print(inputer)</span><br><span class="line">    print(<span class="string">"3"</span>)</span><br><span class="line">new()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#再在最外层加一层用out来接受修饰器的参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out</span><span class="params">(out)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">common</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">common1</span><span class="params">()</span>:</span></span><br><span class="line">            print(out)</span><br><span class="line">            print(<span class="string">"1"</span>)</span><br><span class="line">            <span class="keyword">return</span> func(<span class="string">"2"</span>)</span><br><span class="line">        <span class="keyword">return</span> common1</span><br><span class="line">    <span class="keyword">return</span> common</span><br><span class="line"></span><br><span class="line"><span class="meta">@out("out")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(inputer)</span>:</span></span><br><span class="line">    print(inputer)</span><br><span class="line">    print(<span class="string">"3"</span>)</span><br><span class="line">new()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类装饰器输出结果为1、2、3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,func)</span>:</span></span><br><span class="line">        self._func=func</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"1"</span>)</span><br><span class="line">        self._func()</span><br><span class="line">        print(<span class="string">"3"</span>)</span><br><span class="line"><span class="meta">@Foo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"2"</span>)</span><br><span class="line">bar()</span><br></pre></td></tr></table></figure><p>在Python中，类也是对象，你可以动态的创建类。这就是当我们使用关键字class时Python在幕后做的事情，而这就是通过元类来实现的<br>元类就是用来创建这些类（对象）的，元类就是类的类，你可以这样理解为</p><h2 id="2018-5-25"><a href="#2018-5-25" class="headerlink" title="2018-5-25"></a>2018-5-25</h2><p>进过反复的思考最终决定了还是往大数据架构发展、深度学习算法学历要求太高、公式也不是一两年可以完全弄懂的、等工作一段时间之后再慢慢往那边发展、希望以后能参与分布式深度学习平台的搭建吧、tensorflow源码的阅读先告一段落了</p><h2 id="2018-5-30"><a href="#2018-5-30" class="headerlink" title="2018-5-30"></a>2018-5-30</h2><p>学了几天netty、还是too young啊、、</p><h2 id="2018-6-12"><a href="#2018-6-12" class="headerlink" title="2018-6-12"></a>2018-6-12</h2><p>第一次电话面试、好紧张啊、、个人感觉不是很好但竟然过了、我竟然紧张的连java八大数据类型都没答全、cry、<br>总结几个自己没答好的问题1、基本数据类型的包装类 2、hadoop和spark mapreduce的具体区别 3、java并发包的了解、线程池</p><h2 id="2018-6-22"><a href="#2018-6-22" class="headerlink" title="2018-6-22"></a>2018-6-22</h2><p>看完了西部世界大结局、听着魔性的BGM、入戏太深、are you real？ </p><h2 id="2018-7-17"><a href="#2018-7-17" class="headerlink" title="2018-7-17"></a>2018-7-17</h2><p>考完了期末考试终于开始了暑假的实习、公司第一感觉还不错、总之加油吧、</p><h2 id="2018-7-30"><a href="#2018-7-30" class="headerlink" title="2018-7-30"></a>2018-7-30</h2><p>简单的介绍scala的科里化</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法的一般定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method</span></span>(a:<span class="type">Int</span>):<span class="type">Int</span>=a*a;</span><br><span class="line"><span class="comment">//方法三的科里化拆解</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method2</span></span>(a:<span class="type">Int</span>):<span class="type">Int</span>=&gt;<span class="type">Int</span> = (b:<span class="type">Int</span>)=&gt;&#123;a*b&#125;</span><br><span class="line"><span class="comment">//科里化同时传入多个参数对其进行拆解、科里化是隐式转换的基础</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method3</span></span>(a:<span class="type">Int</span>)(b:<span class="type">Int</span>):<span class="type">Int</span>=a*b</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数的一般定义</span></span><br><span class="line"><span class="keyword">val</span> func=(a:<span class="type">Int</span>)=&gt;a*a</span><br><span class="line"><span class="comment">//函数的第二种方法定义</span></span><br><span class="line"><span class="keyword">val</span> func2:<span class="type">Int</span>=&gt;<span class="type">String</span> = &#123;a=&gt;a.toString()&#125;</span><br></pre></td></tr></table></figure><p>简单的介绍scala的隐式转换<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Door</span></span>&#123;</span><br><span class="line">  <span class="keyword">implicit</span> <span class="keyword">val</span> a=<span class="string">"bbb"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>()(<span class="keyword">implicit</span> name : <span class="type">String</span> = <span class="string">"aaa"</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//通常伴随起始的import共同导入</span></span><br><span class="line">    <span class="keyword">import</span> <span class="type">Door</span>._</span><br><span class="line">    test()</span><br><span class="line">test()(<span class="string">"ccc"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行过程由于导入了存在隐式转换的Object、在执行test的时候会事先在Door中查找是否有同类型的值、如果有则把其作为参数传入进去、<br>如果用户自己有特定的值传入、则用户的传入值优先<br>输出结果aaa ccc</p><p>隐式转换第二个例子<br><code>`</code>scala</p><p>  class RichFile(val file:File){<br>        def read = Source.fromFile(file.getPath).mkString<br>    }</p><p>  object Context{<br>      implicit def file2RichFile(file:File) = new RichFile(file);<br>    }</p><p>  object HelloImplicitConversions {<br>      def main(args: Array[String]): Unit = {<br>        import Context._<br>        println(new File(“E:\input.txt”).read);<br>      }<br>    }<br><code>`</code>scala<br>看main方法、原来的File中没有read方法、导入门面后程序会先查找File类型是否可以转换为其他的类型、发现可以将File转换为Richfile、再查找richfile中是否有<br>read()方法、发现有、于是就隐式转化为richFile并调用其read方法</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;用来记录有趣的东西&lt;br&gt;
    
    </summary>
    
      <category term="other" scheme="https://www.shadowerli.com/categories/other/"/>
    
    
      <category term="other" scheme="https://www.shadowerli.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Think in Java</title>
    <link href="https://www.shadowerli.com/2001/01/02/1-1-2/"/>
    <id>https://www.shadowerli.com/2001/01/02/1-1-2/</id>
    <published>2001-01-01T16:00:00.000Z</published>
    <updated>2018-08-08T06:36:41.266Z</updated>
    
    <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><p>阅读笔记</p><p><the rest="" of="" contents="" |="" 余下全文=""><br>HashMap已经取代了Hashtable</the></p><h2 id="对象的初始化"><a href="#对象的初始化" class="headerlink" title="对象的初始化"></a>对象的初始化</h2><p>在实例化类的时候是先调用他的无参构造函数、若没有java会自动帮你创建一个、但如果你已经定义了一个构造器他就不会帮你创建默认无参构造器、此时可能会报错<br>initialize()<br>this方法只能在方法内部使用、表示调用方法的那个对象的引用<br>static方法里面不能调用this、一般static方法是通过类来直接调用的、相当于全局方法。</p><h2 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h2><p>它是在 Object 类中定义的，因此所有的类都继承了它。<br>子类覆盖 finalize()方法以整理系统资源或者执行其他清理工作。<br>对象可能不会被回收<br>finalize() 方法是在垃圾收集器准备删除对象之前对这个对象调用的。 finalize()方法主要用来在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。<br>当你用了创建对象方式以外的方式为对象分配了内存空间、此时需要用finalize()方法、例如java调用非java代码的方式</p><h2 id="组合（composition）与继承"><a href="#组合（composition）与继承" class="headerlink" title="组合（composition）与继承"></a>组合（composition）与继承</h2><p>组合：为了使类实现多功能、会在类中定义成员变量、各个成员变量来自于其他的类以此来达到类的多样性、当需要向上转型时再考虑使用继承</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态的作用是消除类型之间的耦合关系、多态方法调用允许一种类型表现出与其他相似类型的区别</p></excerpt>]]></content>
    
    <summary type="html">
    
      &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.shadowerli.com/categories/java/"/>
    
    
      <category term="java" scheme="https://www.shadowerli.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>算法及深入解析Java</title>
    <link href="https://www.shadowerli.com/2001/01/01/1-1-1%20/"/>
    <id>https://www.shadowerli.com/2001/01/01/1-1-1 /</id>
    <published>2000-12-31T16:00:00.000Z</published>
    <updated>2018-08-03T07:18:20.225Z</updated>
    
    <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><a id="more"></a><p>长期跟进算法及java深入解析</p><p><the rest="" of="" contents="" |="" 余下全文=""><br>第一次参加远程面试、、然后一道简单的算法题、被虐、意识到算法是一切的根本、接下来慢慢啃吧</the></p><h2 id="Hashmap的实现原理"><a href="#Hashmap的实现原理" class="headerlink" title="Hashmap的实现原理"></a>Hashmap的实现原理</h2><p><a href="https://blog.csdn.net/vking_wang/article/details/14166593" target="_blank" rel="noopener">https://blog.csdn.net/vking_wang/article/details/14166593</a><br>简单来讲就是hashmap是数组加链表、数组存放首个entry[]（一个类、包含、key、value、next）相当于每个链表的节点、同一个hash值依次向后链接<br>再补充个常识迭代是指每次循环对一个数进行操作</p><h2 id="各种报错集合"><a href="#各种报错集合" class="headerlink" title="各种报错集合"></a>各种报错集合</h2><p>###java.lang.reflect.UndeclaredThrowableException<br>远程RPC调用时没有加载同一个.class</p><h2 id="数组题的细节"><a href="#数组题的细节" class="headerlink" title="数组题的细节"></a>数组题的细节</h2><h3 id="int-a-new-int-3"><a href="#int-a-new-int-3" class="headerlink" title="int a = new int[3];"></a>int a = new int[3];</h3><p>这句话生成的数组长度为3、用0填充(非常重要)。</p><p>求两个数组交集的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersect(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        ArrayList temp = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">//for each循环数组、注意之前有int、十分简洁的写法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n:nums1)&#123;</span><br><span class="line">            temp.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m:nums2)&#123;</span><br><span class="line"><span class="comment">//返回包含这个数的下标</span></span><br><span class="line">            <span class="keyword">int</span> index = temp.indexOf(m);</span><br><span class="line">            <span class="keyword">if</span>(index!=-<span class="number">1</span>)&#123;</span><br><span class="line">                list.add(temp.remove(index));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            a[i] = (<span class="keyword">int</span>) list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还有一种方法事先进行排序</span></span><br><span class="line"><span class="comment">//Array.sort()对其进行排序</span></span><br></pre></td></tr></table></figure></p><p>很好的分区方法对数读的九个区进行分区</p><h3 id="list3-get-x-3-3-y-3-add-result"><a href="#list3-get-x-3-3-y-3-add-result" class="headerlink" title="list3.get(x/3*3+y/3).add(result);"></a>list3.get(x/3*3+y/3).add(result);</h3><h2 id="关于java抽象类的是否可以实例化"><a href="#关于java抽象类的是否可以实例化" class="headerlink" title="关于java抽象类的是否可以实例化"></a>关于java抽象类的是否可以实例化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">my</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mymethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"Abstract"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">poly</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String a[])</span> </span>&#123;</span><br><span class="line">        my m = <span class="keyword">new</span> my() &#123;&#125;;</span><br><span class="line">        m.mymethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里似乎实现了抽象类的实例化并调用了其方法、实际上这里“是创建抽象类的匿名子类的实例”、然后通过子类来调用其父类的方法</p></excerpt>]]></content>
    
    <summary type="html">
    
      &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
      <category term="other" scheme="https://www.shadowerli.com/categories/other/"/>
    
    
      <category term="other" scheme="https://www.shadowerli.com/tags/other/"/>
    
  </entry>
  
</feed>
